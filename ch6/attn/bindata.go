// Code generated by go-bindata. DO NOT EDIT.
// sources:
// multi_objs.tsv
// std_posner.tsv
// close_posner.tsv
// reverse_posner.tsv
// obj_attn.tsv

package main


import (
	"bytes"
	"compress/gzip"
	"fmt"
	"io"
	"io/ioutil"
	"os"
	"path/filepath"
	"strings"
	"time"
)

func bindataRead(data []byte, name string) ([]byte, error) {
	gz, err := gzip.NewReader(bytes.NewBuffer(data))
	if err != nil {
		return nil, fmt.Errorf("Read %q: %v", name, err)
	}

	var buf bytes.Buffer
	_, err = io.Copy(&buf, gz)
	clErr := gz.Close()

	if err != nil {
		return nil, fmt.Errorf("Read %q: %v", name, err)
	}
	if clErr != nil {
		return nil, err
	}

	return buf.Bytes(), nil
}


type asset struct {
	bytes []byte
	info  fileInfoEx
}

type fileInfoEx interface {
	os.FileInfo
	MD5Checksum() string
}

type bindataFileInfo struct {
	name        string
	size        int64
	mode        os.FileMode
	modTime     time.Time
	md5checksum string
}

func (fi bindataFileInfo) Name() string {
	return fi.name
}
func (fi bindataFileInfo) Size() int64 {
	return fi.size
}
func (fi bindataFileInfo) Mode() os.FileMode {
	return fi.mode
}
func (fi bindataFileInfo) ModTime() time.Time {
	return fi.modTime
}
func (fi bindataFileInfo) MD5Checksum() string {
	return fi.md5checksum
}
func (fi bindataFileInfo) IsDir() bool {
	return false
}
func (fi bindataFileInfo) Sys() interface{} {
	return nil
}

var _bindataMultiobjstsv = []byte(
	"\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\x6c\xcf\x51\x0b\x82\x30\x14\x05\xe0\xe7\xf9\x3b\xec\x6d\xc4\x36\x5d\xc6" +
	"\x08\x9f\x84\x0a\x22\x1f\x7a\x0c\x19\x16\x0a\x05\xa6\x84\xfb\xff\xb1\x05\x6b\xa7\x89\xa0\x7c\x17\xce\xb9\x57\x7d" +
	"\x50\x24\xdd\xbf\x47\x33\x91\xf4\xdc\x0e\x1d\x59\x1d\x5f\x93\x99\xaf\x42\x31\xca\x9a\x9d\x50\x82\x16\x65\x38\xe4" +
	"\x4d\x28\x01\xca\x40\x39\x48\x82\x36\x81\x38\x65\x20\x0e\x12\xa0\x0c\x94\x83\x24\xc8\x6e\xa8\xcd\xfc\xf7\x2f\xbc" +
	"\x0c\xa6\x76\x71\xa2\x2b\x45\xaa\x47\xdf\xeb\xfa\xf6\xd4\xa7\xf1\x8e\x60\x84\xad\x0b\x69\x3f\xd1\xc3\xbf\x6f\x57" +
	"\x70\x69\x87\xce\x65\x5c\xd8\x06\xe3\x49\xd4\xf0\x2b\x0e\xab\xfc\x7a\xd7\x00\x07\xf9\x89\x0d\x6f\xe5\xc2\x35\x5e" +
	"\xc9\x27\x00\x00\xff\xff\x8a\x93\xb1\x06\xd8\x01\x00\x00")

func bindataMultiobjstsvBytes() ([]byte, error) {
	return bindataRead(
		_bindataMultiobjstsv,
		"multi_objs.tsv",
	)
}



func bindataMultiobjstsv() (*asset, error) {
	bytes, err := bindataMultiobjstsvBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{
		name: "multi_objs.tsv",
		size: 472,
		md5checksum: "",
		mode: os.FileMode(420),
		modTime: time.Unix(1571908155, 0),
	}

	a := &asset{bytes: bytes, info: info}

	return a, nil
}

var _bindataStdposnertsv = []byte(
	"\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\x8a\xf7\xb0\xe2\x54\x71\x2f\xca\x2f\x2d\xe0\x54\xf1\x4b\xcc\x4d\xe5\x54" +
	"\xf5\xcc\x2b\x28\x2d\x89\x36\xb2\x32\xd0\x31\x88\xb5\x31\xb2\x32\xd2\x31\xb7\x43\x16\x34\x8c\x45\xe6\x19\xa1\xf0" +
	"\x8c\x51\x78\x26\x28\x3c\x53\x14\x9e\x19\x12\xcf\x50\xc7\x00\x85\x67\x88\xc2\x33\x42\xe1\x19\xa3\xf0\x4c\x50\x78" +
	"\xa6\x28\x3c\x90\x0d\xfe\xa5\x25\x68\x7e\x31\xb4\x43\x12\x05\x59\xcc\x15\xef\x62\xc5\xe9\x97\x5a\x5a\x52\x94\x98" +
	"\xc3\x19\x92\x58\x94\x9e\x5a\xc2\x69\x80\x06\x0d\x51\x79\x60\x2d\x61\x89\x39\x99\x29\x9c\xce\xa5\xa9\x18\xf2\x68" +
	"\x3a\x91\x54\x93\x60\xbc\x67\x5e\x19\x49\x16\xc0\xd4\xe3\xb0\x02\xd5\x2a\x43\x2e\x40\x00\x00\x00\xff\xff\x1e\x01" +
	"\xad\x49\xf6\x01\x00\x00")

func bindataStdposnertsvBytes() ([]byte, error) {
	return bindataRead(
		_bindataStdposnertsv,
		"std_posner.tsv",
	)
}



func bindataStdposnertsv() (*asset, error) {
	bytes, err := bindataStdposnertsvBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{
		name: "std_posner.tsv",
		size: 502,
		md5checksum: "",
		mode: os.FileMode(420),
		modTime: time.Unix(1571908155, 0),
	}

	a := &asset{bytes: bytes, info: info}

	return a, nil
}

var _bindataCloseposnertsv = []byte(
	"\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\x8a\xf7\xb0\xe2\x54\x71\x2f\xca\x2f\x2d\xe0\x54\xf1\x4b\xcc\x4d\xe5\x54" +
	"\xf5\xcc\x2b\x28\x2d\x89\x36\xb2\x32\xd0\x31\x88\xb5\x31\xb2\x32\xd2\x31\xb7\x43\x16\x34\x8c\x45\xe6\x19\xa1\xf0" +
	"\x8c\x51\x78\x26\x28\x3c\x53\x14\x9e\x19\x12\xcf\x50\xc7\x00\x85\x67\x88\xc2\x33\x42\xe1\x19\xa3\xf0\x4c\x50\x78" +
	"\xa6\x28\x3c\x90\x0d\xfe\xa5\x25\x68\x7e\x31\xb4\x43\x12\x05\x59\xcc\x15\xef\x62\xc5\xe9\x97\x5a\x5a\x52\x94\x98" +
	"\xc3\x19\x92\x58\x94\x9e\x5a\xc2\x69\x80\x01\x0d\x91\xd9\x60\x2d\x61\x89\x39\x99\x29\x9c\xce\xa5\xa9\x18\xf2\x68" +
	"\xfa\x90\x54\x93\x60\xbc\x67\x5e\x19\x49\x16\xc0\xd4\xe3\xb4\x02\xd9\x10\x43\x2e\x40\x00\x00\x00\xff\xff\xc4\xd7" +
	"\x7a\xc0\xf6\x01\x00\x00")

func bindataCloseposnertsvBytes() ([]byte, error) {
	return bindataRead(
		_bindataCloseposnertsv,
		"close_posner.tsv",
	)
}



func bindataCloseposnertsv() (*asset, error) {
	bytes, err := bindataCloseposnertsvBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{
		name: "close_posner.tsv",
		size: 502,
		md5checksum: "",
		mode: os.FileMode(420),
		modTime: time.Unix(1571908155, 0),
	}

	a := &asset{bytes: bytes, info: info}

	return a, nil
}

var _bindataReverseposnertsv = []byte(
	"\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\x8a\xf7\xb0\xe2\x54\x71\x2f\xca\x2f\x2d\xe0\x54\xf1\x4b\xcc\x4d\xe5\x54" +
	"\xf5\xcc\x2b\x28\x2d\x89\x36\xb2\x32\xd0\x31\x88\xb5\x31\xb2\x32\xd2\x31\xb7\x43\x16\x34\x8c\x45\xe6\x19\xa1\xf0" +
	"\x8c\x51\x78\x26\x28\x3c\x53\x14\x9e\x19\x12\xcf\x50\xc7\x00\x85\x67\x88\xc2\x33\x42\xe1\x19\xa3\xf0\x4c\x50\x78" +
	"\xa6\x28\x3c\x90\x0d\xfe\xa5\x25\x68\x7e\x31\xb4\x43\x12\x05\x59\xcc\x15\xef\x62\xc5\xe9\x97\x5a\x5a\x52\x94\x98" +
	"\xc3\x19\x92\x58\x94\x9e\x5a\xc2\x69\x80\x03\x1a\x42\x48\xb0\x96\xb0\xc4\x9c\xcc\x14\x4e\xe7\xd2\x54\x0c\x79\x34" +
	"\x1d\x48\xaa\x49\x30\xde\x33\xaf\x8c\x24\x0b\x60\xea\x71\x58\x81\xaa\xd1\x90\x0b\x10\x00\x00\xff\xff\x6e\x3a\xed" +
	"\x28\xf6\x01\x00\x00")

func bindataReverseposnertsvBytes() ([]byte, error) {
	return bindataRead(
		_bindataReverseposnertsv,
		"reverse_posner.tsv",
	)
}



func bindataReverseposnertsv() (*asset, error) {
	bytes, err := bindataReverseposnertsvBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{
		name: "reverse_posner.tsv",
		size: 502,
		md5checksum: "",
		mode: os.FileMode(420),
		modTime: time.Unix(1571908155, 0),
	}

	a := &asset{bytes: bytes, info: info}

	return a, nil
}

var _bindataObjattntsv = []byte(
	"\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\x8a\xf7\xb0\xe2\x54\x71\x2f\xca\x2f\x2d\xe0\x54\xf1\x4b\xcc\x4d\xe5\x54" +
	"\xf5\xcc\x2b\x28\x2d\x89\x36\xb2\x32\xd0\x31\x88\xb5\x31\xb2\x32\xd2\x31\xb7\x43\x16\x34\x8c\x45\xe6\x19\xa1\xf0" +
	"\x8c\x51\x78\x26\x28\x3c\x53\x14\x9e\x19\x12\xcf\x50\xc7\x00\x85\x67\x88\xc2\x33\x42\xe1\x19\xa3\xf0\x4c\x50\x78" +
	"\xa6\x28\x3c\x90\x0d\xfe\xa5\x25\x68\x7e\x31\xb4\x43\x12\x05\x59\xcc\x15\xef\x62\xc5\xe9\x97\x5a\x5a\x52\x94\x98" +
	"\xc3\xe9\x97\xef\x9f\x94\xc5\x69\xc0\x69\xa0\x67\x61\x04\xa2\x30\xa0\x21\x84\x04\x6b\x0a\x4b\xcc\xc9\x4c\xe1\xf4" +
	"\x4f\xca\x72\x2e\x4d\x45\x91\xc6\xa2\x09\x49\x83\x4b\x66\x5a\x5a\x40\x7e\x31\x21\x5b\x60\x9a\x3c\xf3\xca\x48\xb5" +
	"\x07\xa6\x25\x38\x31\x37\x15\x87\x4d\x86\x68\xda\x00\x01\x00\x00\xff\xff\xae\xf9\x65\x1d\x06\x02\x00\x00")

func bindataObjattntsvBytes() ([]byte, error) {
	return bindataRead(
		_bindataObjattntsv,
		"obj_attn.tsv",
	)
}



func bindataObjattntsv() (*asset, error) {
	bytes, err := bindataObjattntsvBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{
		name: "obj_attn.tsv",
		size: 518,
		md5checksum: "",
		mode: os.FileMode(420),
		modTime: time.Unix(1571908155, 0),
	}

	a := &asset{bytes: bytes, info: info}

	return a, nil
}


//
// Asset loads and returns the asset for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
//
func Asset(name string) ([]byte, error) {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[cannonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("Asset %s can't read by error: %v", name, err)
		}
		return a.bytes, nil
	}
	return nil, &os.PathError{Op: "open", Path: name, Err: os.ErrNotExist}
}

//
// MustAsset is like Asset but panics when Asset would return an error.
// It simplifies safe initialization of global variables.
// nolint: deadcode
//
func MustAsset(name string) []byte {
	a, err := Asset(name)
	if err != nil {
		panic("asset: Asset(" + name + "): " + err.Error())
	}

	return a
}

//
// AssetInfo loads and returns the asset info for the given name.
// It returns an error if the asset could not be found or could not be loaded.
//
func AssetInfo(name string) (os.FileInfo, error) {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[cannonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("AssetInfo %s can't read by error: %v", name, err)
		}
		return a.info, nil
	}
	return nil, &os.PathError{Op: "open", Path: name, Err: os.ErrNotExist}
}

//
// AssetNames returns the names of the assets.
// nolint: deadcode
//
func AssetNames() []string {
	names := make([]string, 0, len(_bindata))
	for name := range _bindata {
		names = append(names, name)
	}
	return names
}

//
// _bindata is a table, holding each asset generator, mapped to its name.
//
var _bindata = map[string]func() (*asset, error){
	"multi_objs.tsv":     bindataMultiobjstsv,
	"std_posner.tsv":     bindataStdposnertsv,
	"close_posner.tsv":   bindataCloseposnertsv,
	"reverse_posner.tsv": bindataReverseposnertsv,
	"obj_attn.tsv":       bindataObjattntsv,
}

//
// AssetDir returns the file names below a certain
// directory embedded in the file by go-bindata.
// For example if you run go-bindata on data/... and data contains the
// following hierarchy:
//     data/
//       foo.txt
//       img/
//         a.png
//         b.png
// then AssetDir("data") would return []string{"foo.txt", "img"}
// AssetDir("data/img") would return []string{"a.png", "b.png"}
// AssetDir("foo.txt") and AssetDir("notexist") would return an error
// AssetDir("") will return []string{"data"}.
//
func AssetDir(name string) ([]string, error) {
	node := _bintree
	if len(name) != 0 {
		cannonicalName := strings.Replace(name, "\\", "/", -1)
		pathList := strings.Split(cannonicalName, "/")
		for _, p := range pathList {
			node = node.Children[p]
			if node == nil {
				return nil, &os.PathError{
					Op: "open",
					Path: name,
					Err: os.ErrNotExist,
				}
			}
		}
	}
	if node.Func != nil {
		return nil, &os.PathError{
			Op: "open",
			Path: name,
			Err: os.ErrNotExist,
		}
	}
	rv := make([]string, 0, len(node.Children))
	for childName := range node.Children {
		rv = append(rv, childName)
	}
	return rv, nil
}


type bintree struct {
	Func     func() (*asset, error)
	Children map[string]*bintree
}

var _bintree = &bintree{Func: nil, Children: map[string]*bintree{
	"close_posner.tsv": {Func: bindataCloseposnertsv, Children: map[string]*bintree{}},
	"multi_objs.tsv": {Func: bindataMultiobjstsv, Children: map[string]*bintree{}},
	"obj_attn.tsv": {Func: bindataObjattntsv, Children: map[string]*bintree{}},
	"reverse_posner.tsv": {Func: bindataReverseposnertsv, Children: map[string]*bintree{}},
	"std_posner.tsv": {Func: bindataStdposnertsv, Children: map[string]*bintree{}},
}}

// RestoreAsset restores an asset under the given directory
func RestoreAsset(dir, name string) error {
	data, err := Asset(name)
	if err != nil {
		return err
	}
	info, err := AssetInfo(name)
	if err != nil {
		return err
	}
	err = os.MkdirAll(_filePath(dir, filepath.Dir(name)), os.FileMode(0755))
	if err != nil {
		return err
	}
	err = ioutil.WriteFile(_filePath(dir, name), data, info.Mode())
	if err != nil {
		return err
	}
	return os.Chtimes(_filePath(dir, name), info.ModTime(), info.ModTime())
}

// RestoreAssets restores an asset under the given directory recursively
func RestoreAssets(dir, name string) error {
	children, err := AssetDir(name)
	// File
	if err != nil {
		return RestoreAsset(dir, name)
	}
	// Dir
	for _, child := range children {
		err = RestoreAssets(dir, filepath.Join(name, child))
		if err != nil {
			return err
		}
	}
	return nil
}

func _filePath(dir, name string) string {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	return filepath.Join(append([]string{dir}, strings.Split(cannonicalName, "/")...)...)
}
