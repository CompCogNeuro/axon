// Code generated by go-bindata. DO NOT EDIT.
// sources:
// twout_all.tsv
// twout_a.tsv
// twout_b.tsv

package main


import (
	"bytes"
	"compress/gzip"
	"fmt"
	"io"
	"io/ioutil"
	"os"
	"path/filepath"
	"strings"
	"time"
)

func bindataRead(data []byte, name string) ([]byte, error) {
	gz, err := gzip.NewReader(bytes.NewBuffer(data))
	if err != nil {
		return nil, fmt.Errorf("Read %q: %v", name, err)
	}

	var buf bytes.Buffer
	_, err = io.Copy(&buf, gz)
	clErr := gz.Close()

	if err != nil {
		return nil, fmt.Errorf("Read %q: %v", name, err)
	}
	if clErr != nil {
		return nil, err
	}

	return buf.Bytes(), nil
}


type asset struct {
	bytes []byte
	info  fileInfoEx
}

type fileInfoEx interface {
	os.FileInfo
	MD5Checksum() string
}

type bindataFileInfo struct {
	name        string
	size        int64
	mode        os.FileMode
	modTime     time.Time
	md5checksum string
}

func (fi bindataFileInfo) Name() string {
	return fi.name
}
func (fi bindataFileInfo) Size() int64 {
	return fi.size
}
func (fi bindataFileInfo) Mode() os.FileMode {
	return fi.mode
}
func (fi bindataFileInfo) ModTime() time.Time {
	return fi.modTime
}
func (fi bindataFileInfo) MD5Checksum() string {
	return fi.md5checksum
}
func (fi bindataFileInfo) IsDir() bool {
	return false
}
func (fi bindataFileInfo) Sys() interface{} {
	return nil
}

var _bindataTwoutalltsv = []byte(
	"\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\xa4\x96\xc1\x4e\xe3\x30\x10\x86\xcf\xe9\x73\xec\xde\x7a\xf0\xcc\x38\xdd" +
	"\x25\x42\x9c\x38\xc0\x05\x1e\x00\x55\x51\x2d\x71\x04\x71\x68\xdf\x1f\x91\xda\xa9\x7f\x8f\x9d\x38\x46\x95\xaa\xfc" +
	"\x71\xfc\xfd\x9e\x19\x7b\x92\xf1\x69\xe8\xfe\xbc\x9c\x3e\xde\xbb\xbf\xcf\x9f\x5f\x97\xf3\x1b\x0f\x66\x6f\x8e\xf7" +
	"\x3c\xf4\xfb\xfe\x21\xbe\x49\xc7\x58\x31\x28\x01\x65\x23\x45\x7b\x03\x8a\x40\x31\x28\x01\x15\x53\x18\x28\x0c\x14" +
	"\x06\x0a\x03\x85\x81\x22\x40\x11\xa0\x08\x50\x04\x28\x02\x14\x0b\x14\x0b\x14\x0b\x14\x0b\x14\x3b\x51\x5e\x2f\xe7" +
	"\x4c\x96\xa3\xbb\x84\x0f\x31\x4a\x41\x09\xc4\x6b\xaa\x23\x49\x28\x19\xa5\xa0\x04\x14\x23\x8a\x11\xc5\x88\x62\x44" +
	"\x31\xa2\x04\x51\x82\x28\x41\x94\x20\x4a\x10\x65\x11\x65\x11\x65\x11\x65\x11\xf5\x93\xfd\xdd\xf8\x38\x74\x66\x3c" +
	"\x75\xa6\xa3\xce\xc0\x8f\xfc\x3f\x4d\x57\xe9\xa8\x81\xfb\x04\x73\x4c\xf6\x79\xe3\xbd\x5c\x83\xd7\xed\x29\x2a\xcc" +
	"\x4b\x46\x26\x2f\x9a\xe2\x2a\x3d\x9f\x9d\xa7\x22\xa4\xac\x23\x28\xef\xe5\x1a\xbc\xa8\xea\x9a\x12\x2f\x9e\xe3\xa2" +
	"\xe2\xac\x5b\xbe\xf2\xf1\x55\xac\xce\x7b\xb9\x5f\x78\xa5\x77\xf5\x3e\xf1\x6a\xf2\x92\xf1\x94\xdd\x67\x69\x4d\xf2" +
	"\x6b\x59\x8b\x74\xd6\xde\xcb\x35\x79\x6d\xcc\xc4\xe4\x65\xfd\xf9\x5a\x3f\x25\x54\x18\x5d\xaa\xe4\xbc\x26\xef\xe5" +
	"\x9a\xbc\x4a\x99\xd3\x19\xa1\x39\x87\x7d\x52\xaf\xaa\x1d\x8c\x9c\x85\x8a\x61\xbd\xfa\xa4\x5e\xf5\x5e\x3a\x73\xa5" +
	"\x5d\x19\xea\x75\x88\xfa\x61\xf5\xae\x5a\x89\x84\x92\x79\xa1\x5e\x87\xa8\x1f\xb6\x7a\x51\x29\x9a\x64\x1f\xfe\x53" +
	"\xe7\x2b\xe7\xa8\x77\xf7\xc6\x6e\xed\xbd\xd2\xf3\x55\xe7\x55\x3e\x03\xfa\x3a\xf4\x8d\xff\x99\x3e\xbf\x9a\x91\xed" +
	"\xab\xf3\x5e\xba\xcf\xaf\x7b\xc5\x6b\x5e\x7d\x9f\xcc\x71\xdd\xa9\xb8\x34\x4d\xd7\x61\xe9\x5c\xe7\x72\x4b\xde\x2b" +
	"\x8d\xab\xc6\x6b\xa9\x8e\x7a\x24\xc4\x45\x26\x7a\x81\x95\x52\x90\x1f\xc9\xb5\xa3\x62\x13\x0b\x66\xae\xd1\x4c\xe7" +
	"\x20\x8d\x2b\x32\xbf\x9a\xc5\x9f\x1c\xd5\x49\xd9\x9e\xf8\x60\xe6\x9a\xcc\xf2\xf6\xc5\xab\xab\x59\xf8\xe8\xa0\xe4" +
	"\x5f\xb7\xdb\x14\xb1\xe9\x55\x14\xcc\x5c\x93\xd9\xc6\x19\xbb\xef\x00\x00\x00\xff\xff\xcf\x29\x69\x0c\xeb\x0d\x00" +
	"\x00")

func bindataTwoutalltsvBytes() ([]byte, error) {
	return bindataRead(
		_bindataTwoutalltsv,
		"twout_all.tsv",
	)
}



func bindataTwoutalltsv() (*asset, error) {
	bytes, err := bindataTwoutalltsvBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{
		name: "twout_all.tsv",
		size: 3563,
		md5checksum: "",
		mode: os.FileMode(420),
		modTime: time.Unix(1572912961, 0),
	}

	a := &asset{bytes: bytes, info: info}

	return a, nil
}

var _bindataTwoutatsv = []byte(
	"\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\x94\x94\xbb\x4e\xf4\x30\x10\x85\x6b\xef\x73\xfc\x7f\xb7\x85\x67\xc6\xcb" +
	"\x25\x42\x54\x14\xd0\xc0\x03\xa0\x55\xb4\x05\x25\x88\x62\xf7\xfd\x11\xce\x12\xf9\xb3\x27\x37\x45\x8a\x72\x9c\xe4" +
	"\x3b\xe3\x63\x8f\xfb\xe7\x2e\xfc\x7b\x3d\x7d\x7e\x84\xff\x2f\x5f\xdf\x97\xf3\xbb\x76\x71\x1f\x8f\x0f\xda\x1d\xf6" +
	"\x87\xc7\x72\x50\x8e\xa5\x52\x28\x83\x4a\x85\x92\x7d\x84\x12\x28\x85\x32\xa8\x92\xa2\xa0\x28\x28\x0a\x8a\x82\xa2" +
	"\xa0\x18\x28\x06\x8a\x81\x62\xa0\x18\x28\x09\x94\x04\x4a\x02\x25\x81\x92\x32\xe5\xed\x72\x76\x52\x2e\x46\x85\x1f" +
	"\x29\xa5\x51\x82\x38\x44\x5d\x48\xa1\x54\x4a\xa3\x04\x4a\x89\x52\xa2\x94\x28\x25\x4a\x89\x32\xa2\x8c\x28\x23\xca" +
	"\x88\x32\xa2\x12\x51\x89\xa8\x44\x54\x22\xea\x37\xfd\x5d\xff\xd4\x85\xd8\x9f\x42\x0c\x12\x22\x2e\xb9\xde\x25\x3f" +
	"\xd5\x6f\x23\xc6\x05\xff\x44\xf7\xfb\x98\xbd\x24\x7b\xf9\x3e\x35\xd5\xbb\x64\xac\xa8\x26\x40\x65\x2f\x1d\xbd\xf8" +
	"\x87\x37\xd3\x9a\xb9\xa1\xba\xec\x65\xfd\xc9\xcd\xc8\x4b\xac\xad\x65\xc9\x7d\xd4\xd9\x2b\x5d\xd7\x6b\x39\x75\x99" +
	"\x78\x3b\x37\xe3\xb1\xd6\xec\x75\xa8\xe6\x35\xfd\xdc\xd4\x3a\xbb\x96\x55\x32\xd9\xeb\xa6\xd8\x87\xab\x13\x59\xa0" +
	"\x4b\x93\xf3\xe0\x75\xdb\xac\x97\xe7\xd8\xae\xd5\xc6\x2e\xc9\x5e\x77\xce\x9e\x97\x89\x39\x78\xab\xba\xb2\xba\xec" +
	"\x75\xdf\x78\xd5\xd5\x8a\x53\xef\x5c\xcf\x79\x7b\x68\xf0\x92\x58\x34\x98\xdb\x86\x6e\x2c\xde\x48\xdb\xd4\x75\x88" +
	"\x52\x9e\x1c\xd3\xfd\x3c\x95\xeb\xea\x2c\x06\xb3\xbf\xa3\x43\xaa\x7b\xbd\xfd\x6a\xa3\x8d\x4d\xb9\xfb\x09\x00\x00" +
	"\xff\xff\x20\x99\xe7\x8e\x6c\x08\x00\x00")

func bindataTwoutatsvBytes() ([]byte, error) {
	return bindataRead(
		_bindataTwoutatsv,
		"twout_a.tsv",
	)
}



func bindataTwoutatsv() (*asset, error) {
	bytes, err := bindataTwoutatsvBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{
		name: "twout_a.tsv",
		size: 2156,
		md5checksum: "",
		mode: os.FileMode(420),
		modTime: time.Unix(1572850375, 0),
	}

	a := &asset{bytes: bytes, info: info}

	return a, nil
}

var _bindataTwoutbtsv = []byte(
	"\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\x94\x94\xcb\x4e\xf3\x30\x10\x85\xd7\xee\x73\xfc\xff\x2e\x0b\xcf\x25\x5c" +
	"\x22\xc4\x8a\x05\x6c\xe0\x01\x50\x15\x51\x89\x25\x88\x45\xfb\xfe\x08\x27\x69\xe7\xd8\x33\x24\xa8\x52\xe5\xe3\x78" +
	"\xbe\x33\x9e\xb1\x3d\x3e\x0e\xe9\xdf\xf3\xdb\xc7\x7b\xfa\xff\xf4\xf9\x75\x3a\xbe\xf2\x90\xbb\xbc\xbf\xe3\xa1\xef" +
	"\xfa\x7b\x3b\x49\x7b\xab\x18\x94\x80\x52\xa3\xa8\xcb\xa0\x08\x14\x83\x12\x50\x96\xc2\x40\x61\xa0\x30\x50\x18\x28" +
	"\x0c\x14\x01\x8a\x00\x45\x80\x22\x40\x11\xa0\x28\x50\x14\x28\x0a\x14\x05\x8a\x16\xca\xcb\xe9\xe8\x54\xd9\xcc\x12" +
	"\x2e\x62\x94\x82\x12\x88\x53\xa9\x8d\x24\x94\x8c\x52\x50\x02\x8a\x11\xc5\x88\x62\x44\x31\xa2\x18\x51\x82\x28\x41" +
	"\x94\x20\x4a\x10\x25\x88\x52\x44\x29\xa2\x14\x51\x8a\xa8\x9f\xea\xef\xc6\x87\x21\xe5\xf1\x90\x72\xa2\x94\xe1\x47" +
	"\xf3\x3f\x95\x51\xfd\xd5\xae\xa2\x20\xae\xfa\x52\xbc\xa8\x78\x45\xeb\xdd\xb8\x4a\xc7\x63\xba\xcc\x15\x2f\x3e\x7b" +
	"\x51\x18\x75\xd9\xc3\xda\x2c\xb9\xd1\x34\x7b\xc9\x78\x70\x6a\x54\xaf\x8d\x9c\x36\x67\x57\xbc\x74\xee\x57\x9b\x91" +
	"\x1f\xeb\x77\x2e\xee\xdf\x9c\x67\xf1\xea\xab\x7d\x6d\xaa\xbe\xbb\xaf\xb8\xa2\xcb\xbe\xae\xcc\x39\x6c\xab\x64\x63" +
	"\x7e\xdb\x71\xe0\x50\xd5\xf0\xba\xe9\x97\xe7\xe8\x75\x86\x42\xff\x7a\xbc\x9c\x8d\x1b\xe7\xcc\xaf\x66\x19\xd4\xac" +
	"\xdd\xf3\x39\xab\xe2\x75\xdb\x78\xb5\xb4\xf8\x56\xc7\x27\xb1\xca\x77\xba\xcb\xd9\x5c\xb0\xcd\xcf\xc0\xdf\xaf\xc9" +
	"\x64\x66\x5f\x8e\xcd\x79\x86\x27\x2e\x1c\x4d\x66\xcb\xd3\x41\x6e\xe3\xd7\x9f\xa7\x8d\x11\xbb\xef\x00\x00\x00\xff" +
	"\xff\xd2\xe7\x6c\x50\x6c\x08\x00\x00")

func bindataTwoutbtsvBytes() ([]byte, error) {
	return bindataRead(
		_bindataTwoutbtsv,
		"twout_b.tsv",
	)
}



func bindataTwoutbtsv() (*asset, error) {
	bytes, err := bindataTwoutbtsvBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{
		name: "twout_b.tsv",
		size: 2156,
		md5checksum: "",
		mode: os.FileMode(420),
		modTime: time.Unix(1572850375, 0),
	}

	a := &asset{bytes: bytes, info: info}

	return a, nil
}


//
// Asset loads and returns the asset for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
//
func Asset(name string) ([]byte, error) {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[cannonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("Asset %s can't read by error: %v", name, err)
		}
		return a.bytes, nil
	}
	return nil, &os.PathError{Op: "open", Path: name, Err: os.ErrNotExist}
}

//
// MustAsset is like Asset but panics when Asset would return an error.
// It simplifies safe initialization of global variables.
// nolint: deadcode
//
func MustAsset(name string) []byte {
	a, err := Asset(name)
	if err != nil {
		panic("asset: Asset(" + name + "): " + err.Error())
	}

	return a
}

//
// AssetInfo loads and returns the asset info for the given name.
// It returns an error if the asset could not be found or could not be loaded.
//
func AssetInfo(name string) (os.FileInfo, error) {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[cannonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("AssetInfo %s can't read by error: %v", name, err)
		}
		return a.info, nil
	}
	return nil, &os.PathError{Op: "open", Path: name, Err: os.ErrNotExist}
}

//
// AssetNames returns the names of the assets.
// nolint: deadcode
//
func AssetNames() []string {
	names := make([]string, 0, len(_bindata))
	for name := range _bindata {
		names = append(names, name)
	}
	return names
}

//
// _bindata is a table, holding each asset generator, mapped to its name.
//
var _bindata = map[string]func() (*asset, error){
	"twout_all.tsv": bindataTwoutalltsv,
	"twout_a.tsv":   bindataTwoutatsv,
	"twout_b.tsv":   bindataTwoutbtsv,
}

//
// AssetDir returns the file names below a certain
// directory embedded in the file by go-bindata.
// For example if you run go-bindata on data/... and data contains the
// following hierarchy:
//     data/
//       foo.txt
//       img/
//         a.png
//         b.png
// then AssetDir("data") would return []string{"foo.txt", "img"}
// AssetDir("data/img") would return []string{"a.png", "b.png"}
// AssetDir("foo.txt") and AssetDir("notexist") would return an error
// AssetDir("") will return []string{"data"}.
//
func AssetDir(name string) ([]string, error) {
	node := _bintree
	if len(name) != 0 {
		cannonicalName := strings.Replace(name, "\\", "/", -1)
		pathList := strings.Split(cannonicalName, "/")
		for _, p := range pathList {
			node = node.Children[p]
			if node == nil {
				return nil, &os.PathError{
					Op: "open",
					Path: name,
					Err: os.ErrNotExist,
				}
			}
		}
	}
	if node.Func != nil {
		return nil, &os.PathError{
			Op: "open",
			Path: name,
			Err: os.ErrNotExist,
		}
	}
	rv := make([]string, 0, len(node.Children))
	for childName := range node.Children {
		rv = append(rv, childName)
	}
	return rv, nil
}


type bintree struct {
	Func     func() (*asset, error)
	Children map[string]*bintree
}

var _bintree = &bintree{Func: nil, Children: map[string]*bintree{
	"twout_a.tsv": {Func: bindataTwoutatsv, Children: map[string]*bintree{}},
	"twout_all.tsv": {Func: bindataTwoutalltsv, Children: map[string]*bintree{}},
	"twout_b.tsv": {Func: bindataTwoutbtsv, Children: map[string]*bintree{}},
}}

// RestoreAsset restores an asset under the given directory
func RestoreAsset(dir, name string) error {
	data, err := Asset(name)
	if err != nil {
		return err
	}
	info, err := AssetInfo(name)
	if err != nil {
		return err
	}
	err = os.MkdirAll(_filePath(dir, filepath.Dir(name)), os.FileMode(0755))
	if err != nil {
		return err
	}
	err = ioutil.WriteFile(_filePath(dir, name), data, info.Mode())
	if err != nil {
		return err
	}
	return os.Chtimes(_filePath(dir, name), info.ModTime(), info.ModTime())
}

// RestoreAssets restores an asset under the given directory recursively
func RestoreAssets(dir, name string) error {
	children, err := AssetDir(name)
	// File
	if err != nil {
		return RestoreAsset(dir, name)
	}
	// Dir
	for _, child := range children {
		err = RestoreAssets(dir, filepath.Join(name, child))
		if err != nil {
			return err
		}
	}
	return nil
}

func _filePath(dir, name string) string {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	return filepath.Join(append([]string{dir}, strings.Split(cannonicalName, "/")...)...)
}
