// Code generated by go-bindata. DO NOT EDIT.
// sources:
// train_ab.tsv
// train_ac.tsv
// test_ab.tsv
// test_ac.tsv
// test_lure.tsv

package main


import (
	"bytes"
	"compress/gzip"
	"fmt"
	"io"
	"io/ioutil"
	"os"
	"path/filepath"
	"strings"
	"time"
)

func bindataRead(data []byte, name string) ([]byte, error) {
	gz, err := gzip.NewReader(bytes.NewBuffer(data))
	if err != nil {
		return nil, fmt.Errorf("Read %q: %v", name, err)
	}

	var buf bytes.Buffer
	_, err = io.Copy(&buf, gz)
	clErr := gz.Close()

	if err != nil {
		return nil, fmt.Errorf("Read %q: %v", name, err)
	}
	if clErr != nil {
		return nil, err
	}

	return buf.Bytes(), nil
}


type asset struct {
	bytes []byte
	info  fileInfoEx
}

type fileInfoEx interface {
	os.FileInfo
	MD5Checksum() string
}

type bindataFileInfo struct {
	name        string
	size        int64
	mode        os.FileMode
	modTime     time.Time
	md5checksum string
}

func (fi bindataFileInfo) Name() string {
	return fi.name
}
func (fi bindataFileInfo) Size() int64 {
	return fi.size
}
func (fi bindataFileInfo) Mode() os.FileMode {
	return fi.mode
}
func (fi bindataFileInfo) ModTime() time.Time {
	return fi.modTime
}
func (fi bindataFileInfo) MD5Checksum() string {
	return fi.md5checksum
}
func (fi bindataFileInfo) IsDir() bool {
	return false
}
func (fi bindataFileInfo) Sys() interface{} {
	return nil
}

var _bindataTrainabtsv = []byte(
	"\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\xec\xd6\xbd\x6e\x1b\x57\x10\xc5\xf1\x9a\x7a\x8e\xa4\x63\xc1\x73\x66\x46" +
	"\x49\x88\x20\x4d\x12\x20\x69\xfc\x02\x86\x20\xc8\x80\x4b\x7f\x14\xf6\xfb\x1b\x90\xb4\x32\x79\xff\xf7\xde\x5d\xa9" +
	"\x5e\x08\x20\xa4\xe1\xfa\xec\xce\xfc\xee\xd0\xbc\xff\xef\x7c\xf8\xe5\xdd\xc3\xa7\x8f\x87\x5f\xff\xff\xfc\xf5\xfb" +
	"\xb7\xf7\x79\x3e\x1d\x1f\x7f\xee\xfe\xcc\xf3\xed\xd1\xc7\x38\xe6\x5f\xed\x9b\xba\x6b\x2b\x46\x25\x9a\x8a\x8e\x27" +
	"\x54\xda\x1c\x21\x47\xc8\x31\x72\x8c\x1c\x23\xc7\x4d\x8e\x1e\x5b\x6c\x2b\x42\xc5\xa8\xb4\x39\x6d\x5f\x42\x5f\x42" +
	"\x5f\x42\x5f\x42\x5f\x42\x5f\x42\x5f\x6a\xfa\xd2\x33\x5d\x5b\x11\x2a\x46\xa5\xcd\x11\x72\x84\x1c\x21\x47\xc8\x31" +
	"\x72\x8c\x1c\x23\xa7\xed\xab\xf5\x12\xbc\x04\x2f\xc1\x4b\xf0\x12\xbc\x04\x2f\xc1\x4b\xf0\x12\xbc\x04\x2f\xc1\xcb" +
	"\xf0\x32\xbc\x0c\x2f\xc3\xcb\xf0\x32\xbc\x0c\x2f\xc3\xcb\xf0\x32\xbc\x0c\x2f\xc3\xcb\xf0\x32\xbc\x0c\x2f\xc3\xcb" +
	"\xf0\x32\xbc\x0c\x2f\xc3\xcb\xf0\x32\xbc\x0c\x2f\xc3\x2b\xe0\x15\xf0\x0a\x78\x05\xbc\x02\x5e\x01\xaf\x80\x57\xc0" +
	"\x2b\xe0\x15\xf0\x0a\x78\x05\xbc\x02\x5e\x01\xaf\x80\x57\xc0\x2b\xe0\x15\xf0\x0a\x78\x05\xbc\x02\x5e\x01\xaf\x80" +
	"\x57\xc0\x2b\xe1\x95\xf0\x4a\x78\x25\xbc\x12\x5e\x09\xaf\x84\x57\xc2\x2b\xe1\x95\xf0\x4a\x78\x25\xbc\x12\x5e\x09" +
	"\xaf\x84\x57\xc2\x2b\xe1\x95\xf0\x4a\x78\x25\xbc\x12\x5e\x09\xaf\x84\x57\xc2\xab\xe0\x55\xf0\x2a\x78\x15\xbc\x0a" +
	"\x5e\x05\xaf\x82\x57\xc1\xab\xe0\x55\xf0\x2a\x78\x15\xbc\x0a\x5e\x05\xaf\x82\x57\xc1\xab\xe0\x55\xf0\x2a\x78\x15" +
	"\xbc\x0a\x5e\x05\xaf\x82\x57\xbd\x78\xfd\xfb\xf7\x97\xe7\x6f\x20\x9d\xaf\x8a\xd7\x6f\x0a\x97\x1b\x95\x36\xf2\xa9" +
	"\xc5\xeb\x4a\x9b\x23\xe4\x08\x39\x46\x8e\x91\x63\xe4\xb4\x2d\x2e\x74\xd7\x15\xa1\x62\x54\xda\x9c\xb6\x2f\xa1\x2f" +
	"\xa1\x2f\xa1\x2f\xa1\x2f\xa1\x2f\xa1\xaf\x96\xee\xe7\x57\xc5\xeb\x8a\x50\x31\x2a\x6d\x8e\x90\x23\xe4\x08\x39\x42" +
	"\x8e\x91\x63\xe4\x18\x39\x6d\x5f\xad\x97\xe0\x25\x78\x09\x5e\x82\x97\xe0\x25\x78\x09\x5e\x82\x97\xe0\x25\x78\x09" +
	"\x5e\x86\x97\xe1\x65\x78\x19\x5e\x86\x97\xe1\x65\x78\x19\x5e\x86\x97\xe1\x65\x78\x19\x5e\x86\x97\xe1\x65\x78\x19" +
	"\x5e\x86\x97\xe1\x65\x78\x19\x5e\x86\x97\xe1\x65\x78\x19\x5e\x01\xaf\x80\x57\xc0\x2b\xe0\x15\xf0\x0a\x78\x05\xbc" +
	"\x02\x5e\x01\xaf\x80\x57\xc0\x2b\xe0\x15\xf0\x0a\x78\x05\xbc\x02\x5e\x01\xaf\x80\x57\xc0\x2b\xe0\x15\xf0\x0a\x78" +
	"\x05\xbc\x02\x5e\x09\xaf\x84\x57\xc2\x2b\xe1\x95\xf0\x4a\x78\x25\xbc\x12\x5e\x09\xaf\x84\x57\xc2\x2b\xe1\x95\xf0" +
	"\x4a\x78\x25\xbc\x12\x5e\x09\xaf\x84\x57\xc2\x2b\xe1\x95\xf0\x4a\x78\x25\xbc\x12\x5e\x05\xaf\x82\x57\xc1\xab\xe0" +
	"\x55\xf0\x2a\x78\x15\xbc\x0a\x5e\x05\xaf\x82\x57\xc1\xab\xe0\x55\xf0\x2a\x78\x15\xbc\x0a\x5e\x05\xaf\x82\x57\xc1" +
	"\xab\xe0\x55\xf0\x2a\x78\x15\xbc\x96\xaf\x8a\x37\xf7\xff\x9c\x0f\x0f\x1f\xee\x4f\x87\xa7\x1f\xbd\xbc\xea\x70\xba" +
	"\xf8\xd1\xc5\xdf\xba\x78\xbd\xfc\x6d\x54\x1f\x5d\xd3\x5e\xdf\xbf\xef\xe8\x3a\xde\x49\xb8\xaf\xba\xb9\xeb\x9d\xac" +
	"\x25\xee\xf3\x41\xe2\x72\x90\xd4\x19\x08\x6f\x3d\x6f\x6d\x7e\xc3\xf5\xab\xe6\xf9\x1c\xe0\x75\xc2\x5a\x2e\xef\x3f" +
	"\x1e\xf0\x6c\xf4\xfb\x7c\xba\xef\x2c\x07\xc9\x08\x1c\xb7\xb0\x35\x7e\x6d\x40\xb3\x5d\x9b\x6d\x38\xaf\x9f\xef\xfc" +
	"\x96\x7d\xec\x77\xd2\xfb\xb7\xfb\x7c\xba\x89\xcb\x41\x8a\x57\xef\xd7\x78\x10\xa3\x47\xdd\xd6\xd2\x6c\xa0\x7d\x82" +
	"\x6d\xf9\x6f\x19\xd4\xf8\x38\xed\xf3\x69\xde\x59\x0e\x52\xe2\x44\x8f\xff\x1e\xff\x36\xda\xd8\xf1\x23\x6d\xd9\xfc" +
	"\xd1\xc6\xad\x91\xf6\xef\xbb\xf6\x09\x31\xca\xdd\xe7\x33\x9d\xcf\x72\x90\x6a\xc3\x96\x8c\x6e\x3f\xdb\x1f\xd6\xb7" +
	"\xef\xd1\x1c\x72\x36\x80\x1e\xdc\xfa\x5e\xbd\x15\x6e\x9f\xcf\xc5\x27\xd2\xed\x74\xe3\x66\x81\x6b\x0f\x38\x1e\xdd" +
	"\xeb\xc6\xce\xfb\xcf\x76\x72\xfd\x20\x6c\xa7\xee\x43\xed\xf3\xb9\x7a\x5d\x0e\xd2\x6f\xdd\x47\xea\x35\xcc\x01\x8c" +
	"\x4f\xec\xa9\xfb\x7f\xef\xe8\x4e\xdb\x00\x66\xad\xcf\x76\x7e\x7d\xe3\xb6\x6d\xf6\x3e\x9f\xee\x7d\x97\x83\xf4\x3b" +
	"\x2e\xed\x9d\xcb\x51\xe3\xb3\xf3\x3a\x6b\x7c\xb6\x75\xaf\x01\x9a\x7d\x22\x8c\x06\x35\xea\x6f\x1d\x62\x9f\x4f\x27" +
	"\x7f\x39\x48\x7f\x74\x2f\x98\x6f\xe4\xe8\xba\xde\x23\xf0\x51\xd7\x36\x6a\x36\x86\xb5\x41\xcf\x3e\x39\xd6\x07\x3e" +
	"\x07\xdc\xe7\xd3\xcd\xbd\xf9\x11\x00\x00\xff\xff\xf3\xf0\x26\x65\x3a\x2b\x00\x00")

func bindataTrainabtsvBytes() ([]byte, error) {
	return bindataRead(
		_bindataTrainabtsv,
		"train_ab.tsv",
	)
}



func bindataTrainabtsv() (*asset, error) {
	bytes, err := bindataTrainabtsvBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{
		name: "train_ab.tsv",
		size: 11066,
		md5checksum: "",
		mode: os.FileMode(420),
		modTime: time.Unix(1572773467, 0),
	}

	a := &asset{bytes: bytes, info: info}

	return a, nil
}

var _bindataTrainactsv = []byte(
	"\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\xec\xd6\xcd\x6e\x2b\x45\x10\xc5\xf1\xb5\xf3\x1c\xb0\xf3\xc2\xe7\x54\x55" +
	"\x00\x0b\xb1\x01\x24\xd8\xf0\x02\x28\x8a\x22\xc4\xf2\x7e\x2c\xee\x7d\xff\x2b\x25\x99\x5c\x4f\xff\xbb\x7b\x26\xfb" +
	"\x91\xa5\x28\xee\x19\x9f\xa9\xaa\x5f\xb7\xe5\xc7\xbf\xae\xa7\x1f\xfe\x79\xfa\xf0\xff\xe9\xc7\xbf\x3f\x7e\xfe\xfa" +
	"\xe5\xdf\xbc\x5e\xce\xcf\xaf\x87\x5f\xf3\x7a\x7f\xf6\x39\xce\xf9\x5b\x7b\x51\x0f\xed\x8a\xb1\x12\xcd\x8a\xce\x17" +
	"\xac\xb4\x39\x42\x8e\x90\x63\xe4\x18\x39\x46\x8e\x9b\x1c\x3d\xb7\xd8\xae\x08\x2b\xc6\x4a\x9b\xd3\xf6\x25\xf4\x25" +
	"\xf4\x25\xf4\x25\xf4\x25\xf4\x25\xf4\xa5\xa6\x2f\xbd\xd2\xb5\x2b\xc2\x8a\xb1\xd2\xe6\x08\x39\x42\x8e\x90\x23\xe4" +
	"\x18\x39\x46\x8e\x91\xd3\xf6\xd5\x7a\x09\x5e\x82\x97\xe0\x25\x78\x09\x5e\x82\x97\xe0\x25\x78\x09\x5e\x82\x97\xe0" +
	"\x65\x78\x19\x5e\x86\x97\xe1\x65\x78\x19\x5e\x86\x97\xe1\x65\x78\x19\x5e\x86\x97\xe1\x65\x78\x19\x5e\x86\x97\xe1" +
	"\x65\x78\x19\x5e\x86\x97\xe1\x65\x78\x19\x5e\x86\x97\xe1\x15\xf0\x0a\x78\x05\xbc\x02\x5e\x01\xaf\x80\x57\xc0\x2b" +
	"\xe0\x15\xf0\x0a\x78\x05\xbc\x02\x5e\x01\xaf\x80\x57\xc0\x2b\xe0\x15\xf0\x0a\x78\x05\xbc\x02\x5e\x01\xaf\x80\x57" +
	"\xc0\x2b\xe0\x95\xf0\x4a\x78\x25\xbc\x12\x5e\x09\xaf\x84\x57\xc2\x2b\xe1\x95\xf0\x4a\x78\x25\xbc\x12\x5e\x09\xaf" +
	"\x84\x57\xc2\x2b\xe1\x95\xf0\x4a\x78\x25\xbc\x12\x5e\x09\xaf\x84\x57\xc2\x2b\xe1\x55\xf0\x2a\x78\x15\xbc\x0a\x5e" +
	"\x05\xaf\x82\x57\xc1\xab\xe0\x55\xf0\x2a\x78\x15\xbc\x0a\x5e\x05\xaf\x82\x57\xc1\xab\xe0\x55\xf0\x2a\x78\x15\xbc" +
	"\x0a\x5e\x05\xaf\x82\x57\xc1\xab\xde\xbc\xfe\xfc\xfd\xd3\xeb\x2f\x90\xce\x4f\xc5\xf5\x45\xe1\x76\x63\xa5\x8d\x7c" +
	"\x69\x71\xbd\xd2\xe6\x08\x39\x42\x8e\x91\x63\xe4\x18\x39\x6d\x8b\x0b\xdd\x7a\x45\x58\x31\x56\xda\x9c\xb6\x2f\xa1" +
	"\x2f\xa1\x2f\xa1\x2f\xa1\x2f\xa1\x2f\xa1\xaf\x96\xee\xfb\x4f\xc5\xf5\x8a\xb0\x62\xac\xb4\x39\x42\x8e\x90\x23\xe4" +
	"\x08\x39\x46\x8e\x91\x63\xe4\xb4\x7d\xb5\x5e\x82\x97\xe0\x25\x78\x09\x5e\x82\x97\xe0\x25\x78\x09\x5e\x82\x97\xe0" +
	"\x25\x78\x19\x5e\x86\x97\xe1\x65\x78\x19\x5e\x86\x97\xe1\x65\x78\x19\x5e\x86\x97\xe1\x65\x78\x19\x5e\x86\x97\xe1" +
	"\x65\x78\x19\x5e\x86\x97\xe1\x65\x78\x19\x5e\x86\x97\xe1\x65\x78\x05\xbc\x02\x5e\x01\xaf\x80\x57\xc0\x2b\xe0\x15" +
	"\xf0\x0a\x78\x05\xbc\x02\x5e\x01\xaf\x80\x57\xc0\x2b\xe0\x15\xf0\x0a\x78\x05\xbc\x02\x5e\x01\xaf\x80\x57\xc0\x2b" +
	"\xe0\x15\xf0\x0a\x78\x25\xbc\x12\x5e\x09\xaf\x84\x57\xc2\x2b\xe1\x95\xf0\x4a\x78\x25\xbc\x12\x5e\x09\xaf\x84\x57" +
	"\xc2\x2b\xe1\x95\xf0\x4a\x78\x25\xbc\x12\x5e\x09\xaf\x84\x57\xc2\x2b\xe1\x95\xf0\x4a\x78\x15\xbc\x0a\x5e\x05\xaf" +
	"\x82\x57\xc1\xab\xe0\x55\xf0\x2a\x78\x15\xbc\x0a\x5e\x05\xaf\x82\x57\xc1\xab\xe0\x55\xf0\x2a\x78\x15\xbc\x0a\x5e" +
	"\x05\xaf\x82\x57\xc1\xab\xe0\x55\xf0\x5a\x7e\x2a\xde\x3d\xfe\x71\x3d\x3d\xfd\xf7\x78\x39\xbd\xbc\xf4\xf6\x57\xa7" +
	"\xcb\xcd\x4b\x37\xef\x75\xf3\xf7\xf6\x3f\x4d\xef\x67\xae\xba\x79\x4c\x5b\xe7\xee\xbd\xbf\xad\xbf\xbd\x77\x9c\xdf" +
	"\x4b\x60\xad\xc7\x7c\x56\xeb\xcb\x46\x52\xa7\xc1\x51\x31\xfd\xc2\x47\x25\x6f\x0d\xbc\x7f\x67\xbf\x8e\xd9\xa8\xe7" +
	"\x69\xb3\xfb\xfb\xcf\xed\x0d\xfa\x98\xcf\x70\x3e\xcb\x46\xf2\xb0\x31\x8e\xa8\xbf\xe3\xd9\xd0\xf6\xfb\x5e\x61\xdb" +
	"\xb9\xfb\xf8\xf6\x0f\x76\xff\x89\x3f\xe6\x33\x9c\xcf\xb2\x91\xe2\xdd\xe7\x6b\x54\xf6\xd6\xa0\xb6\x0a\x1c\x3d\xa7" +
	"\xbd\x32\x3e\xb9\x63\xf0\xdb\xcf\x8c\x11\x67\xe3\x3d\xe6\x33\xa8\x73\xd9\x48\x89\xe0\xf1\xfb\xf1\x7f\xf3\xc1\xa9" +
	"\x9b\xd7\x1b\xc8\x0c\x64\xfb\x84\x8c\xeb\xe8\x6f\x81\x7e\x5d\xed\x7d\xc7\x7c\xa6\xf3\x59\x36\x52\x4d\x76\xe0\xf6" +
	"\x19\x19\x9f\xaf\x59\xa1\xf3\xc1\xee\x6d\x70\x6f\x35\xef\x7d\xee\xbe\xee\x8e\xf9\x34\x1b\xe9\x7e\x47\xa1\xfd\xd2" +
	"\x79\xb2\xd6\x0f\xd9\x73\x02\xe7\x27\xac\x3f\xe2\xd9\x89\xeb\x7f\x43\x8c\x9e\xd7\xef\x6e\x76\xfd\x98\xcf\x70\x23" +
	"\xfd\x34\x28\x67\x3e\xc0\x7e\x8b\xdb\xa5\x8d\x3e\x37\x02\x98\xb5\x38\x82\x1a\x03\xf5\x07\xd5\x26\x6e\x9d\xd8\x63" +
	"\x3e\xab\xeb\xcb\x46\xfa\x19\x6d\x8e\x82\x7a\x05\xcc\x47\xbf\x75\x52\xf7\x7d\x23\x8c\x1b\xe9\x0f\x76\xff\x37\xca" +
	"\xfe\xe7\x1f\xf3\x19\x7e\x7e\xd9\x48\xbf\x4c\x1b\xeb\x9d\xc4\xfd\xf7\xcd\x4f\xee\xe8\xdc\x6d\x9d\xb8\xd9\x89\xea" +
	"\x7f\x33\x8c\xf2\xfb\xcc\x5b\x50\xc7\x7c\x56\xef\xef\xbe\x05\x00\x00\xff\xff\x8d\x42\x27\x31\x3a\x2b\x00\x00")

func bindataTrainactsvBytes() ([]byte, error) {
	return bindataRead(
		_bindataTrainactsv,
		"train_ac.tsv",
	)
}



func bindataTrainactsv() (*asset, error) {
	bytes, err := bindataTrainactsvBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{
		name: "train_ac.tsv",
		size: 11066,
		md5checksum: "",
		mode: os.FileMode(420),
		modTime: time.Unix(1572773467, 0),
	}

	a := &asset{bytes: bytes, info: info}

	return a, nil
}

var _bindataTestabtsv = []byte(
	"\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\xcc\xd6\xcd\xae\x1b\x45\x10\xc5\xf1\xb5\xf3\x1c\xb0\xf3\xe2\x9e\x53\x55" +
	"\x01\x2c\xc4\x06\x90\x60\xc3\x0b\xa0\xe8\x2a\x48\x2c\xf9\x58\xc0\xfb\x23\x25\x99\x8b\xdd\xff\xee\x9e\x71\x3c\x89" +
	"\xad\x91\xee\xb5\xdb\xe3\x33\x53\xf5\xab\x1e\xf9\xf9\xa7\xd3\xe1\x8b\x5f\xde\xfe\xf1\xfb\xe1\xcb\x9f\xff\xfc\xfb" +
	"\xdf\x7f\x7e\xcd\xd3\xd3\xf1\xdd\xf1\xe6\xdb\x3c\xbd\x3e\xfa\x18\xc7\xfc\xae\xfd\x50\x6f\xda\x15\x63\x25\x9a\x15" +
	"\x1d\x9f\xb0\xd2\xe6\x08\x39\x42\x8e\x91\x63\xe4\x18\x39\x6e\x72\xf4\xae\xc4\x76\x45\x58\x31\x56\xda\x9c\xb6\x2e" +
	"\xa1\x2e\xa1\x2e\xa1\x2e\xa1\x2e\xa1\x2e\xa1\x2e\x35\x75\xe9\x03\x5d\xbb\x22\xac\x18\x2b\x6d\x8e\x90\x23\xe4\x08" +
	"\x39\x42\x8e\x91\x63\xe4\x18\x39\x6d\x5d\xad\x97\xe0\x25\x78\x09\x5e\x82\x97\xe0\x25\x78\x09\x5e\x82\x97\xe0\x25" +
	"\x78\x09\x5e\x86\x97\xe1\x65\x78\x19\x5e\x86\x97\xe1\x65\x78\x19\x5e\x86\x97\xe1\x65\x78\x19\x5e\x86\x97\xe1\x65" +
	"\x78\x19\x5e\x86\x97\xe1\x65\x78\x19\x5e\x86\x97\xe1\x65\x78\x19\x5e\x01\xaf\x80\x57\xc0\x2b\xe0\x15\xf0\x0a\x78" +
	"\x05\xbc\x02\x5e\x01\xaf\x80\x57\xc0\x2b\xe0\x15\xf0\x0a\x78\x05\xbc\x02\x5e\x01\xaf\x80\x57\xc0\x2b\xe0\x15\xf0" +
	"\x0a\x78\x05\xbc\x02\x5e\x09\xaf\x84\x57\xc2\x2b\xe1\x95\xf0\x4a\x78\x25\xbc\x12\x5e\x09\xaf\x84\x57\xc2\x2b\xe1" +
	"\x95\xf0\x4a\x78\x25\xbc\x12\x5e\x09\xaf\x84\x57\xc2\x2b\xe1\x95\xf0\x4a\x78\x25\xbc\x12\x5e\x05\xaf\x82\x57\xc1" +
	"\xab\xe0\x55\xf0\x2a\x78\x15\xbc\x0a\x5e\x05\xaf\x82\x57\xc1\xab\xe0\x55\xf0\x2a\x78\x15\xbc\x0a\x5e\x05\xaf\x82" +
	"\x57\xc1\xab\xe0\x55\xf0\x2a\x78\x15\xbc\xea\xc5\xeb\xc7\xef\xff\xfa\xf0\x0b\xa4\xf3\x53\xf1\xf2\x43\xe1\x74\x63" +
	"\xa5\x8d\x7c\x5f\xe2\xe5\x4a\x9b\x23\xe4\x08\x39\x46\x8e\x91\x63\xe4\xb4\x25\x2e\x74\x97\x2b\xc2\x8a\xb1\xd2\xe6" +
	"\xb4\x75\x09\x75\x09\x75\x09\x75\x09\x75\x09\x75\x09\x75\xb5\x74\xff\xff\x54\xbc\x5c\x11\x56\x8c\x95\x36\x47\xc8" +
	"\x11\x72\x84\x1c\x21\xc7\xc8\x31\x72\x8c\x9c\xb6\xae\xd6\x4b\xf0\x12\xbc\x04\x2f\xc1\x4b\xf0\x12\xbc\x04\x2f\xc1" +
	"\x4b\xf0\x12\xbc\x04\x2f\xc3\xcb\xf0\x32\xbc\x0c\x2f\xc3\xcb\xf0\x32\xbc\x0c\x2f\xc3\xcb\xf0\x32\xbc\x0c\x2f\xc3" +
	"\xcb\xf0\x32\xbc\x0c\x2f\xc3\xcb\xf0\x32\xbc\x0c\x2f\xc3\xcb\xf0\x32\xbc\x0c\xaf\x80\x57\xc0\x2b\xe0\x15\xf0\x0a" +
	"\x78\x05\xbc\x02\x5e\x01\xaf\x80\x57\xc0\x2b\xe0\x15\xf0\x0a\x78\x05\xbc\x02\x5e\x01\xaf\x80\x57\xc0\x2b\xe0\x15" +
	"\xf0\x0a\x78\x05\xbc\x02\x5e\x01\xaf\x84\x57\xc2\x2b\xe1\x95\xf0\x4a\x78\x25\xbc\x12\x5e\x09\xaf\x84\x57\xc2\x2b" +
	"\xe1\x95\xf0\x4a\x78\x25\xbc\x12\x5e\x09\xaf\x84\x57\xc2\x2b\xe1\x95\xf0\x4a\x78\x25\xbc\x12\x5e\x09\xaf\x82\x57" +
	"\xc1\xab\xe0\x55\xf0\x2a\x78\x15\xbc\x0a\x5e\x05\xaf\x82\x57\xc1\xab\xe0\x55\xf0\x2a\x78\x15\xbc\x0a\x5e\x05\xaf" +
	"\x82\x57\xc1\xab\xe0\x55\xf0\x2a\x78\x15\xbc\x0a\x5e\xcb\x4f\xc5\x57\xcf\x3f\x9c\x0e\x6f\x7f\x7b\x7e\x3a\xbc\x3f" +
	"\xf4\xf2\x57\x87\xa7\xb3\x43\x67\xef\x75\xf6\xf7\xfc\xd5\xe5\x37\xf6\x39\xd4\xb9\xde\xe8\x0e\x78\x1f\x42\xca\xec" +
	"\x7b\xdb\x13\x6f\xe9\x4f\xef\x6a\xfd\x73\xfa\x75\xb7\xd7\x7d\x90\xfe\x2c\x83\xa4\x4e\x43\x78\xe9\x79\x69\x9f\x6f" +
	"\x90\x7a\x25\x8e\xcb\x1d\xdf\xe5\xa8\xc1\xb3\xd6\xef\xd1\x9f\xd9\x60\xae\xd5\x31\xca\xbf\x73\x7f\x96\x41\x32\x02" +
	"\xc7\x25\xac\xc5\xef\x73\x8c\xf7\x05\xef\x74\xbe\xe7\xb7\xec\xc7\x51\x25\xfc\xee\xed\xfd\x51\xb7\x8a\xf1\x7d\xf5" +
	"\xae\x3c\x7b\x02\xde\xa5\x3f\xcb\x20\xc5\xd5\xfb\x6b\xdc\x88\xbd\x8e\xb5\x3d\x7a\xcd\xde\xd5\x47\x35\x6a\x3c\x4e" +
	"\xb7\xf5\x67\x3c\x04\xeb\xe4\xb3\x81\xbb\x63\x7f\x96\x41\x4a\x4c\xf4\xf8\xfd\xf8\xd5\xe7\x7d\x22\xad\x91\xf6\x5b" +
	"\xb1\xf6\x84\x18\xe5\xee\xd5\x9f\xf5\x3a\xd6\xe1\x7b\x63\x72\xe7\xfe\x2c\x83\x54\x1b\x76\xc9\xe8\xf2\x9f\x62\x8c" +
	"\x98\xbb\xd6\xa8\xd1\xe7\xdb\xf7\xd5\xc7\xc2\x5d\xdf\x9f\xd9\x79\xdb\x9f\x33\x0f\xd5\x9f\x65\x90\x5e\x4f\x77\xdc" +
	"\x2c\xb0\x77\x83\x7b\x1c\xe3\x7d\xc0\xd6\x6c\xd9\x71\x5b\x9f\x18\x23\xa2\x3d\xfb\xb3\xed\xc9\x74\xdd\x58\xde\xb9" +
	"\x3f\xcb\x20\x7d\xd5\xbd\xa5\x5e\xc1\x6c\x40\xaf\x81\xb7\x1f\xb3\x46\x8f\x4a\x9f\xed\xf9\xf5\x1d\xb7\x6d\x67\xef" +
	"\xd3\x1f\x0e\x5a\x7f\x43\x8e\xff\x3f\x58\x7f\x96\x41\xfa\x1a\xa7\xf6\xe6\x72\x54\x78\xef\x12\xb7\x1e\xd7\x00\xcd" +
	"\x9e\x08\xa3\x46\x8d\xea\x5b\x87\xb8\xbd\x3f\xbd\xfb\x9d\x0d\x52\xef\x9e\x1f\xac\x3f\xcb\x20\x7d\xd3\x3d\x61\xbe" +
	"\x23\x3f\xed\x28\xcd\xda\xb0\xd6\xe8\xd9\x93\x63\xbd\xe1\xe3\xdc\x7d\xfa\x33\xba\xde\xa6\x9d\xff\xf2\xfe\xc1\xfa" +
	"\xf3\xea\xbf\x00\x00\x00\xff\xff\x23\x21\x04\x63\x3a\x2b\x00\x00")

func bindataTestabtsvBytes() ([]byte, error) {
	return bindataRead(
		_bindataTestabtsv,
		"test_ab.tsv",
	)
}



func bindataTestabtsv() (*asset, error) {
	bytes, err := bindataTestabtsvBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{
		name: "test_ab.tsv",
		size: 11066,
		md5checksum: "",
		mode: os.FileMode(420),
		modTime: time.Unix(1572773467, 0),
	}

	a := &asset{bytes: bytes, info: info}

	return a, nil
}

var _bindataTestactsv = []byte(
	"\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\xcc\xd6\xcd\x6e\x2b\x45\x10\xc5\xf1\xb5\xef\x73\xc0\xce\x0b\x9f\x53\x55" +
	"\x01\x2c\xc4\x06\x90\x60\xc3\x0b\xa0\x28\x8a\x10\x4b\x3e\x16\xf0\xfe\x48\x49\x26\xd8\xfd\xef\x9e\x99\xdc\x99\x28" +
	"\xd6\x48\x51\xd2\x8e\x8f\xbb\xea\x57\xdd\xf2\xc3\x4f\xe7\xc3\x17\xbf\x3c\xfe\xf1\xfb\xe1\xcb\x9f\xff\xfc\xfb\xdf" +
	"\x7f\x7e\xcd\xf3\xe9\xf8\xf4\xdc\x7f\x9b\xe7\xbb\xa3\x8f\x71\xcc\xef\xda\x17\x75\xdf\xae\x18\x2b\xd1\xac\xe8\x78" +
	"\xc2\x4a\x9b\x23\xe4\x08\x39\x46\x8e\x91\x63\xe4\xb8\xc9\xd1\x53\x89\xed\x8a\xb0\x62\xac\xb4\x39\x6d\x5d\x42\x5d" +
	"\x42\x5d\x42\x5d\x42\x5d\x42\x5d\x42\x5d\x6a\xea\xd2\x0b\x5d\xbb\x22\xac\x18\x2b\x6d\x8e\x90\x23\xe4\x08\x39\x42" +
	"\x8e\x91\x63\xe4\x18\x39\x6d\x5d\xad\x97\xe0\x25\x78\x09\x5e\x82\x97\xe0\x25\x78\x09\x5e\x82\x97\xe0\x25\x78\x09" +
	"\x5e\x86\x97\xe1\x65\x78\x19\x5e\x86\x97\xe1\x65\x78\x19\x5e\x86\x97\xe1\x65\x78\x19\x5e\x86\x97\xe1\x65\x78\x19" +
	"\x5e\x86\x97\xe1\x65\x78\x19\x5e\x86\x97\xe1\x65\x78\x19\x5e\x01\xaf\x80\x57\xc0\x2b\xe0\x15\xf0\x0a\x78\x05\xbc" +
	"\x02\x5e\x01\xaf\x80\x57\xc0\x2b\xe0\x15\xf0\x0a\x78\x05\xbc\x02\x5e\x01\xaf\x80\x57\xc0\x2b\xe0\x15\xf0\x0a\x78" +
	"\x05\xbc\x02\x5e\x09\xaf\x84\x57\xc2\x2b\xe1\x95\xf0\x4a\x78\x25\xbc\x12\x5e\x09\xaf\x84\x57\xc2\x2b\xe1\x95\xf0" +
	"\x4a\x78\x25\xbc\x12\x5e\x09\xaf\x84\x57\xc2\x2b\xe1\x95\xf0\x4a\x78\x25\xbc\x12\x5e\x05\xaf\x82\x57\xc1\xab\xe0" +
	"\x55\xf0\x2a\x78\x15\xbc\x0a\x5e\x05\xaf\x82\x57\xc1\xab\xe0\x55\xf0\x2a\x78\x15\xbc\x0a\x5e\x05\xaf\x82\x57\xc1" +
	"\xab\xe0\x55\xf0\x2a\x78\x15\xbc\xea\xd5\xeb\xc7\xef\xff\x7a\xf9\x06\xd2\xf9\xaa\x78\xfd\xa2\xf0\xef\xc6\x4a\x1b" +
	"\xf9\x5c\xe2\xf5\x4a\x9b\x23\xe4\x08\x39\x46\x8e\x91\x63\xe4\xb4\x25\x4e\x74\xd7\x2b\xc2\x8a\xb1\xd2\xe6\xb4\x75" +
	"\x09\x75\x09\x75\x09\x75\x09\x75\x09\x75\x09\x75\xb5\x74\xff\x7f\x55\xbc\x5e\x11\x56\x8c\x95\x36\x47\xc8\x11\x72" +
	"\x84\x1c\x21\xc7\xc8\x31\x72\x8c\x9c\xb6\xae\xd6\x4b\xf0\x12\xbc\x04\x2f\xc1\x4b\xf0\x12\xbc\x04\x2f\xc1\x4b\xf0" +
	"\x12\xbc\x04\x2f\xc3\xcb\xf0\x32\xbc\x0c\x2f\xc3\xcb\xf0\x32\xbc\x0c\x2f\xc3\xcb\xf0\x32\xbc\x0c\x2f\xc3\xcb\xf0" +
	"\x32\xbc\x0c\x2f\xc3\xcb\xf0\x32\xbc\x0c\x2f\xc3\xcb\xf0\x32\xbc\x0c\xaf\x80\x57\xc0\x2b\xe0\x15\xf0\x0a\x78\x05" +
	"\xbc\x02\x5e\x01\xaf\x80\x57\xc0\x2b\xe0\x15\xf0\x0a\x78\x05\xbc\x02\x5e\x01\xaf\x80\x57\xc0\x2b\xe0\x15\xf0\x0a" +
	"\x78\x05\xbc\x02\x5e\x01\xaf\x84\x57\xc2\x2b\xe1\x95\xf0\x4a\x78\x25\xbc\x12\x5e\x09\xaf\x84\x57\xc2\x2b\xe1\x95" +
	"\xf0\x4a\x78\x25\xbc\x12\x5e\x09\xaf\x84\x57\xc2\x2b\xe1\x95\xf0\x4a\x78\x25\xbc\x12\x5e\x09\xaf\x82\x57\xc1\xab" +
	"\xe0\x55\xf0\x2a\x78\x15\xbc\x0a\x5e\x05\xaf\x82\x57\xc1\xab\xe0\x55\xf0\x2a\x78\x15\xbc\x0a\x5e\x05\xaf\x82\x57" +
	"\xc1\xab\xe0\x55\xf0\x2a\x78\x15\xbc\x0a\x5e\xd3\x57\xc5\x4f\x0f\x3f\x9c\x0f\x8f\xbf\x3d\x9c\x0e\xcf\x8f\x5e\x7f" +
	"\xea\x70\xba\x78\x74\xf1\xb7\x2e\x7e\x5e\xfe\x76\xfd\x8e\xad\x0f\xf3\xaf\x77\xd6\x7e\xea\x78\x7f\x5c\xd3\x6c\x7e" +
	"\x2f\x41\x3b\xf7\x87\xff\x3f\xde\xd7\xba\x7a\x3f\xb8\x3f\xd3\x20\xa9\x53\xe0\x68\x33\xfd\x8d\xbf\xdf\x20\xad\x6b" +
	"\xf5\x68\x57\xa3\x3a\x46\x8d\xea\x57\xb3\x67\x7f\x46\xd5\xb4\xf9\xf3\x15\xdd\x58\x7f\xa6\x41\xf2\xb0\x30\xb6\xa8" +
	"\x3f\xf1\x0c\xdf\xf6\x2c\x37\x6a\x9e\x6f\x7d\x63\xd7\x9f\xf8\xfd\xfa\xd3\xbf\xb5\x7a\x3b\x1d\xed\xeb\xc6\xfa\x33" +
	"\x0d\x52\xbc\xf9\x7c\x8d\xb6\xbd\xd7\xb3\x54\xf8\xf8\xe4\x8e\xc1\x2f\xdf\x33\x46\x9c\x6b\xef\x5e\xfd\x19\x0f\xd2" +
	"\x12\xe0\xe8\x73\x3e\xb8\x3f\xd3\x20\x25\x82\xc7\x7f\x8f\x7f\x7b\xcf\x1b\x69\xfd\x09\x19\x03\xf6\x47\x40\xc3\xba" +
	"\x7b\x37\xcc\xd6\xfe\x8c\x07\xab\xbf\x8f\xd1\xfe\x6f\xac\x3f\xd3\x20\xd5\xcc\x50\x2c\x9f\x91\xfd\xc7\x68\x7d\x81" +
	"\xcb\xbb\xe9\xdf\x2d\x23\xd0\xb5\x79\x5b\xfa\x33\x1a\xd0\x1e\xfe\xd2\x3e\x6f\xa4\x3f\xd3\x20\xdd\xad\xd8\x68\x7f" +
	"\xeb\x3c\x59\xfb\x3c\xfd\x5c\x7e\xee\x72\xa3\xfb\xa5\xcf\x1d\x83\xa5\xd7\xb7\xf6\x47\xb3\x30\xfd\x1d\x8c\xf7\x77" +
	"\x13\xfd\x99\x06\xe9\xab\xc1\x76\xe6\x1b\xd8\x2f\x71\x9f\xa7\x9f\x3a\xdf\xe0\xcb\xa2\xc7\x40\xfd\x46\xb5\x89\x4b" +
	"\x27\x76\x4b\x7f\x96\xe8\xc6\x7d\xed\x0f\xe8\x0d\xf4\x67\x1a\xa4\xaf\x51\xe6\x28\xa8\xb7\x81\xde\x99\xdd\xfa\xac" +
	"\x2f\xa4\xdf\xd8\xf5\x37\xca\xba\x1b\x69\xcf\xfe\xcc\x0f\xd0\xe7\xef\xef\x03\xfb\x33\x0d\xd2\x37\xb3\x85\xf5\x4e" +
	"\xe2\x7b\x8f\xd2\xd2\x89\x9b\x3b\x51\xfd\x9b\x61\x74\x93\xf4\x99\x97\xa0\xb6\xf4\xe7\x2d\x37\xdb\xe8\x5e\xba\xb1" +
	"\xfe\x7c\xfa\x2f\x00\x00\xff\xff\x31\x95\x63\x70\x3a\x2b\x00\x00")

func bindataTestactsvBytes() ([]byte, error) {
	return bindataRead(
		_bindataTestactsv,
		"test_ac.tsv",
	)
}



func bindataTestactsv() (*asset, error) {
	bytes, err := bindataTestactsvBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{
		name: "test_ac.tsv",
		size: 11066,
		md5checksum: "",
		mode: os.FileMode(420),
		modTime: time.Unix(1572773467, 0),
	}

	a := &asset{bytes: bytes, info: info}

	return a, nil
}

var _bindataTestluretsv = []byte(
	"\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\xcc\xd6\x4d\x6f\x13\x41\x0c\xc6\xf1\x73\xfa\x39\xe0\x96\x43\xfc\xd8\x2e" +
	"\x10\x21\x2e\x80\x04\x17\xbe\x00\xaa\x2a\x0e\xbd\xf1\x26\x44\xbf\x3f\x52\x5f\xd8\x66\xfe\xf3\xb2\x21\x8b\xb2\x1a" +
	"\xa9\x8d\xbc\x91\x67\xec\x9f\x67\x95\xeb\x0f\xfb\xcd\xb3\x4f\x5f\xbe\xdd\x6c\x9e\x7f\xfc\xfe\xf3\xf6\xf7\xe7\xd8" +
	"\xef\xb6\x77\xeb\xea\x75\xec\x2f\xb7\xda\xfa\x36\xde\x94\x0f\xed\xaa\x8c\x08\x11\x2f\x22\xb6\xdd\x21\x52\xe6\x31" +
	"\xe4\x31\xe4\x11\xf2\x08\x79\x84\x3c\x2a\xf2\xd8\x5d\x89\x65\xc4\x10\x11\x22\x65\x9e\xb2\x2e\x43\x5d\x86\xba\x0c" +
	"\x75\x19\xea\x32\xd4\x65\xa8\xcb\x8a\xba\xec\x81\xae\x8c\x18\x22\x42\xa4\xcc\x63\xc8\x63\xc8\x63\xc8\x63\xc8\x23" +
	"\xe4\x11\xf2\x08\x79\xca\xba\x4a\x2f\x83\x97\xc1\xcb\xe0\x65\xf0\x32\x78\x19\xbc\x0c\x5e\x06\x2f\x83\x97\xc1\xcb" +
	"\xe0\x25\x78\x09\x5e\x82\x97\xe0\x25\x78\x09\x5e\x82\x97\xe0\x25\x78\x09\x5e\x82\x97\xe0\x25\x78\x09\x5e\x82\x97" +
	"\xe0\x25\x78\x09\x5e\x82\x97\xe0\x25\x78\x09\x5e\x82\x97\xe0\xe5\xf0\x72\x78\x39\xbc\x1c\x5e\x0e\x2f\x87\x97\xc3" +
	"\xcb\xe1\xe5\xf0\x72\x78\x39\xbc\x1c\x5e\x0e\x2f\x87\x97\xc3\xcb\xe1\xe5\xf0\x72\x78\x39\xbc\x1c\x5e\x0e\x2f\x87" +
	"\x97\xc3\xcb\xe1\x15\xf0\x0a\x78\x05\xbc\x02\x5e\x01\xaf\x80\x57\xc0\x2b\xe0\x15\xf0\x0a\x78\x05\xbc\x02\x5e\x01" +
	"\xaf\x80\x57\xc0\x2b\xe0\x15\xf0\x0a\x78\x05\xbc\x02\x5e\x01\xaf\x80\x57\xc0\x2b\xe0\x95\xf0\x4a\x78\x25\xbc\x12" +
	"\x5e\x09\xaf\x84\x57\xc2\x2b\xe1\x95\xf0\x4a\x78\x25\xbc\x12\x5e\x09\xaf\x84\x57\xc2\x2b\xe1\x95\xf0\x4a\x78\x25" +
	"\xbc\x12\x5e\x09\xaf\x84\x57\xc2\x2b\xff\x7a\xbd\x7f\xfb\xe3\xe1\x17\x48\xe5\xa7\xe2\xe1\x43\xc3\xd7\x85\x48\x99" +
	"\xf2\xbe\xc4\xc3\x48\x99\xc7\x90\xc7\x90\x47\xc8\x23\xe4\x11\xf2\x94\x25\x3e\xd2\x1d\x46\x0c\x11\x21\x52\xe6\x29" +
	"\xeb\x32\xd4\x65\xa8\xcb\x50\x97\xa1\x2e\x43\x5d\x86\xba\x4a\xba\xe9\xa7\xe2\x61\xc4\x10\x11\x22\x65\x1e\x43\x1e" +
	"\x43\x1e\x43\x1e\x43\x1e\x21\x8f\x90\x47\xc8\x53\xd6\x55\x7a\x19\xbc\x0c\x5e\x06\x2f\x83\x97\xc1\xcb\xe0\x65\xf0" +
	"\x32\x78\x19\xbc\x0c\x5e\x06\x2f\xc1\x4b\xf0\x12\xbc\x04\x2f\xc1\x4b\xf0\x12\xbc\x04\x2f\xc1\x4b\xf0\x12\xbc\x04" +
	"\x2f\xc1\x4b\xf0\x12\xbc\x04\x2f\xc1\x4b\xf0\x12\xbc\x04\x2f\xc1\x4b\xf0\x12\xbc\x04\x2f\x87\x97\xc3\xcb\xe1\xe5" +
	"\xf0\x72\x78\x39\xbc\x1c\x5e\x0e\x2f\x87\x97\xc3\xcb\xe1\xe5\xf0\x72\x78\x39\xbc\x1c\x5e\x0e\x2f\x87\x97\xc3\xcb" +
	"\xe1\xe5\xf0\x72\x78\x39\xbc\x1c\x5e\x0e\xaf\x80\x57\xc0\x2b\xe0\x15\xf0\x0a\x78\x05\xbc\x02\x5e\x01\xaf\x80\x57" +
	"\xc0\x2b\xe0\x15\xf0\x0a\x78\x05\xbc\x02\x5e\x01\xaf\x80\x57\xc0\x2b\xe0\x15\xf0\x0a\x78\x05\xbc\x02\x5e\x01\xaf" +
	"\x84\x57\xc2\x2b\xe1\x95\xf0\x4a\x78\x25\xbc\x12\x5e\x09\xaf\x84\x57\xc2\x2b\xe1\x95\xf0\x4a\x78\x25\xbc\x12\x5e" +
	"\x09\xaf\x84\x57\xc2\x2b\xe1\x95\xf0\x4a\x78\x25\xbc\x12\x5e\x8f\x3f\x15\x2f\xae\xdf\xed\x37\x5f\x6f\x7f\xdd\x5c" +
	"\xef\x36\xf7\xcb\xf0\x77\xfa\x3f\x8a\x3f\x8d\x2c\xb1\xec\xe0\x73\x6d\x8f\xa7\x31\x9e\x66\x6e\x25\x36\xb3\xca\xe5" +
	"\xfa\x53\x7b\xd2\xde\xa7\xfc\x5f\xef\xc4\x99\xfb\x33\x8d\x52\xef\xe8\xed\xa4\xad\x16\x2c\xb3\x8e\x23\xad\xb5\x6a" +
	"\x4e\x0b\xe7\x0f\xc4\x52\xfd\xa9\x0f\x06\xbf\x7f\xdc\xf3\x33\xf7\x67\x1a\x25\xcd\x68\x4c\xbd\xb4\x76\x39\xa7\xae" +
	"\x56\xc9\xf5\xdb\xd6\xbe\x6b\x75\x62\x9e\xbb\x4f\xbc\x54\x7f\x5a\xa3\xd1\x1b\xdd\xfa\x5e\xab\xea\xcf\x34\x4a\xde" +
	"\x6c\x58\xbf\x91\xad\xd2\x97\x58\xa3\x93\xb4\x4a\x1b\xdd\xa3\x5d\xf5\xd6\x95\xdf\x6b\xd5\xb7\x44\x7f\x46\x27\x9e" +
	"\x97\x61\x55\xfd\x99\x46\x29\x9a\xb7\xa9\x75\x84\xde\xed\x5b\x66\xb5\x6f\x5d\xad\xa8\x71\x63\xc6\x68\x4f\x77\xea" +
	"\xbd\x2d\x4e\xeb\x4f\x8b\xb2\x9d\xe3\x98\x01\x3a\x53\x7f\xa6\x51\xca\x6e\xf3\xe6\xdc\xbf\x65\xc7\x68\xbc\x6b\x7f" +
	"\xff\x1e\x72\xfd\xb6\x8d\xdf\x2a\x4b\xf5\x67\xf4\xb6\xb8\xff\x3c\xaa\x77\x65\xfd\x99\x46\xe9\x72\xc6\x11\xcb\x12" +
	"\xfb\xf3\x7d\xea\x6a\xed\xdb\xda\x7f\x1c\x6f\x9f\xbc\x86\x3b\x1e\xa5\x7f\xef\x4f\x6f\xf7\xd1\xce\xb5\x3e\xac\xa0" +
	"\x3f\xd3\x28\xbd\x98\x71\xc7\xea\xad\xfb\x7f\x6f\xa5\xc3\x63\xb7\x5b\x35\xe7\x8e\xd5\xce\xdd\x1f\x8e\xe3\xdf\x41" +
	"\x73\xfb\x33\x3a\x69\x3d\x6f\xbb\xf2\x55\xf4\x67\x1a\xa5\x97\xc3\x17\xda\xb8\x35\x4b\x0f\x53\xb9\xc3\xbc\xbb\x3c" +
	"\xc6\xaf\xe7\xaa\xef\x56\x7b\x7e\x6a\x7f\xe6\x8d\xc4\x80\x6e\x6d\xfd\x99\x46\xe9\x55\xe7\xc8\xbd\x0d\x5a\x47\x5a" +
	"\x62\xb5\x6e\x7f\xbf\x85\xc7\xd2\x31\xde\xa7\x5b\xa2\x3f\xf5\xb7\x4e\xbd\xa2\xd1\xc8\xae\xa4\x3f\x17\x7f\x02\x00" +
	"\x00\xff\xff\xce\x81\xb1\x70\x4e\x2b\x00\x00")

func bindataTestluretsvBytes() ([]byte, error) {
	return bindataRead(
		_bindataTestluretsv,
		"test_lure.tsv",
	)
}



func bindataTestluretsv() (*asset, error) {
	bytes, err := bindataTestluretsvBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{
		name: "test_lure.tsv",
		size: 11086,
		md5checksum: "",
		mode: os.FileMode(420),
		modTime: time.Unix(1572773467, 0),
	}

	a := &asset{bytes: bytes, info: info}

	return a, nil
}


//
// Asset loads and returns the asset for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
//
func Asset(name string) ([]byte, error) {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[cannonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("Asset %s can't read by error: %v", name, err)
		}
		return a.bytes, nil
	}
	return nil, &os.PathError{Op: "open", Path: name, Err: os.ErrNotExist}
}

//
// MustAsset is like Asset but panics when Asset would return an error.
// It simplifies safe initialization of global variables.
// nolint: deadcode
//
func MustAsset(name string) []byte {
	a, err := Asset(name)
	if err != nil {
		panic("asset: Asset(" + name + "): " + err.Error())
	}

	return a
}

//
// AssetInfo loads and returns the asset info for the given name.
// It returns an error if the asset could not be found or could not be loaded.
//
func AssetInfo(name string) (os.FileInfo, error) {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[cannonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("AssetInfo %s can't read by error: %v", name, err)
		}
		return a.info, nil
	}
	return nil, &os.PathError{Op: "open", Path: name, Err: os.ErrNotExist}
}

//
// AssetNames returns the names of the assets.
// nolint: deadcode
//
func AssetNames() []string {
	names := make([]string, 0, len(_bindata))
	for name := range _bindata {
		names = append(names, name)
	}
	return names
}

//
// _bindata is a table, holding each asset generator, mapped to its name.
//
var _bindata = map[string]func() (*asset, error){
	"train_ab.tsv":  bindataTrainabtsv,
	"train_ac.tsv":  bindataTrainactsv,
	"test_ab.tsv":   bindataTestabtsv,
	"test_ac.tsv":   bindataTestactsv,
	"test_lure.tsv": bindataTestluretsv,
}

//
// AssetDir returns the file names below a certain
// directory embedded in the file by go-bindata.
// For example if you run go-bindata on data/... and data contains the
// following hierarchy:
//     data/
//       foo.txt
//       img/
//         a.png
//         b.png
// then AssetDir("data") would return []string{"foo.txt", "img"}
// AssetDir("data/img") would return []string{"a.png", "b.png"}
// AssetDir("foo.txt") and AssetDir("notexist") would return an error
// AssetDir("") will return []string{"data"}.
//
func AssetDir(name string) ([]string, error) {
	node := _bintree
	if len(name) != 0 {
		cannonicalName := strings.Replace(name, "\\", "/", -1)
		pathList := strings.Split(cannonicalName, "/")
		for _, p := range pathList {
			node = node.Children[p]
			if node == nil {
				return nil, &os.PathError{
					Op: "open",
					Path: name,
					Err: os.ErrNotExist,
				}
			}
		}
	}
	if node.Func != nil {
		return nil, &os.PathError{
			Op: "open",
			Path: name,
			Err: os.ErrNotExist,
		}
	}
	rv := make([]string, 0, len(node.Children))
	for childName := range node.Children {
		rv = append(rv, childName)
	}
	return rv, nil
}


type bintree struct {
	Func     func() (*asset, error)
	Children map[string]*bintree
}

var _bintree = &bintree{Func: nil, Children: map[string]*bintree{
	"test_ab.tsv": {Func: bindataTestabtsv, Children: map[string]*bintree{}},
	"test_ac.tsv": {Func: bindataTestactsv, Children: map[string]*bintree{}},
	"test_lure.tsv": {Func: bindataTestluretsv, Children: map[string]*bintree{}},
	"train_ab.tsv": {Func: bindataTrainabtsv, Children: map[string]*bintree{}},
	"train_ac.tsv": {Func: bindataTrainactsv, Children: map[string]*bintree{}},
}}

// RestoreAsset restores an asset under the given directory
func RestoreAsset(dir, name string) error {
	data, err := Asset(name)
	if err != nil {
		return err
	}
	info, err := AssetInfo(name)
	if err != nil {
		return err
	}
	err = os.MkdirAll(_filePath(dir, filepath.Dir(name)), os.FileMode(0755))
	if err != nil {
		return err
	}
	err = ioutil.WriteFile(_filePath(dir, name), data, info.Mode())
	if err != nil {
		return err
	}
	return os.Chtimes(_filePath(dir, name), info.ModTime(), info.ModTime())
}

// RestoreAssets restores an asset under the given directory recursively
func RestoreAssets(dir, name string) error {
	children, err := AssetDir(name)
	// File
	if err != nil {
		return RestoreAsset(dir, name)
	}
	// Dir
	for _, child := range children {
		err = RestoreAssets(dir, filepath.Join(name, child))
		if err != nil {
			return err
		}
	}
	return nil
}

func _filePath(dir, name string) string {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	return filepath.Join(append([]string{dir}, strings.Split(cannonicalName, "/")...)...)
}
