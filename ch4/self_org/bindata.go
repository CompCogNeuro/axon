// Code generated by go-bindata. DO NOT EDIT.
// sources:
// lines_5x5x1.tsv
// lines_5x5x2.tsv

package main


import (
	"bytes"
	"compress/gzip"
	"fmt"
	"io"
	"io/ioutil"
	"os"
	"path/filepath"
	"strings"
	"time"
)

func bindataRead(data []byte, name string) ([]byte, error) {
	gz, err := gzip.NewReader(bytes.NewBuffer(data))
	if err != nil {
		return nil, fmt.Errorf("Read %q: %v", name, err)
	}

	var buf bytes.Buffer
	_, err = io.Copy(&buf, gz)
	clErr := gz.Close()

	if err != nil {
		return nil, fmt.Errorf("Read %q: %v", name, err)
	}
	if clErr != nil {
		return nil, err
	}

	return buf.Bytes(), nil
}


type asset struct {
	bytes []byte
	info  fileInfoEx
}

type fileInfoEx interface {
	os.FileInfo
	MD5Checksum() string
}

type bindataFileInfo struct {
	name        string
	size        int64
	mode        os.FileMode
	modTime     time.Time
	md5checksum string
}

func (fi bindataFileInfo) Name() string {
	return fi.name
}
func (fi bindataFileInfo) Size() int64 {
	return fi.size
}
func (fi bindataFileInfo) Mode() os.FileMode {
	return fi.mode
}
func (fi bindataFileInfo) ModTime() time.Time {
	return fi.modTime
}
func (fi bindataFileInfo) MD5Checksum() string {
	return fi.md5checksum
}
func (fi bindataFileInfo) IsDir() bool {
	return false
}
func (fi bindataFileInfo) Sys() interface{} {
	return nil
}

var _bindataLines5x5x1tsv = []byte(
	"\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\x94\xcf\x2f\x0f\xc2\x30\x10\x05\x70\x7d\xfb\x1c\xe0\x2a\xee\xdf\x4c\x43" +
	"\x50\x88\x61\x90\x18\xb2\x2c\x08\x24\x04\x01\xdf\x9f\x8c\x63\xa1\x2f\x59\xa0\xcb\x99\x7b\x85\xf7\x5b\x3b\x74\x99" +
	"\x56\x87\xf3\xf5\x42\xeb\xfd\xed\xfe\x7c\x9c\x34\x73\xe2\x7e\xa3\xb9\x4d\xed\xb6\x3c\x94\xbe\x4c\x0a\xc9\x20\x79" +
	"\x91\x24\x31\x24\x81\xa4\x90\x0c\x52\xa9\x28\x28\x0a\x8a\x82\xa2\xa0\x28\x28\x06\x8a\x81\x62\xa0\x18\x28\x06\x8a" +
	"\x83\xe2\xa0\x38\x28\x0e\x8a\x27\xef\x9b\x61\x97\xe9\xc8\x24\xc4\x9f\xa9\xdc\xa2\x28\xf5\x85\x69\x8b\xa2\x2e\xf9" +
	"\x56\x6c\x51\xb4\x65\xd7\x1c\xb7\x28\xfa\xd2\x17\x92\xbc\x8b\xdd\x78\x34\x0d\xd7\x4d\x14\xcb\xbf\x57\x12\x51\xd4" +
	"\xd9\x1f\x7f\x12\x51\xb4\x3f\x17\x9b\x21\xa2\xe8\xb5\x2f\xfb\x12\xcd\x2b\x00\x00\xff\xff\xca\xd0\xc9\xd6\xa9\x03" +
	"\x00\x00")

func bindataLines5x5x1tsvBytes() ([]byte, error) {
	return bindataRead(
		_bindataLines5x5x1tsv,
		"lines_5x5x1.tsv",
	)
}



func bindataLines5x5x1tsv() (*asset, error) {
	bytes, err := bindataLines5x5x1tsvBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{
		name: "lines_5x5x1.tsv",
		size: 937,
		md5checksum: "",
		mode: os.FileMode(420),
		modTime: time.Unix(1571703559, 0),
	}

	a := &asset{bytes: bytes, info: info}

	return a, nil
}

var _bindataLines5x5x2tsv = []byte(
	"\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\x94\x95\xb1\x4e\xc3\x30\x10\x86\xe7\xf4\x39\x60\xcb\x60\xdf\x5d\x97\x08" +
	"\x31\x31\x84\x85\xb1\x0b\xaa\x22\x06\x46\x10\x03\xbc\x3f\x4a\xd3\xfc\xf1\x39\x17\xfb\x2c\x4b\x55\x9c\xf8\xfb\x72" +
	"\x77\x7f\xd5\x4e\xe3\xd0\x3d\xbc\x7d\x7c\x7d\x76\x8f\xaf\xdf\x3f\x7f\xbf\xef\x34\x84\x3e\x5c\x9f\x68\x38\xf7\xe7" +
	"\xe7\xf4\x66\xbc\xa6\x3b\x52\x3b\x56\x3b\x49\x76\xb1\x0f\x6a\x17\xd5\x8e\xd4\x8e\xd5\x2e\xb5\x90\xb2\x90\xb2\x90" +
	"\xb2\x90\xb2\x90\xb2\xb0\xb2\xb0\xb2\xb0\xb2\xb0\xb2\xb0\xb2\x88\xb2\x88\xb2\x88\xb2\x88\xb2\x48\x2f\xd7\xd3\xf4" +
	"\x32\x74\x97\x30\x5d\x62\x37\xaf\x70\x5b\xce\x2b\xb0\x74\xbb\x13\xef\x4f\x5d\x57\x60\xb9\x8d\x9b\x3f\xc1\x4a\x6b" +
	"\xc5\x5d\x5c\xd9\x71\xb9\xbb\xae\x80\x93\x85\x2b\xb0\x9a\x70\x59\xc0\xd2\xc1\xb9\x82\x05\x2c\x57\x2b\xdd\x59\xc0" +
	"\x8a\xb7\xcb\xcd\xb1\xb0\x71\xce\xb7\x61\xc2\x69\xbe\x71\xce\xb7\x29\xdb\x2d\xdf\x38\xe7\xdb\xf8\xad\xda\x6a\x56" +
	"\xf9\xd6\x3b\x0e\x69\xcd\x63\x4a\x38\x2d\x60\xc9\x3c\x57\xb4\x80\xe5\x4a\xa5\x86\x05\xac\x78\xbb\xcc\xf3\xa5\x25" +
	"\xa3\xc6\x84\xc1\x4a\x5b\x3e\x5b\x46\x94\x67\xe4\xaa\x1f\x6c\x4a\x38\x2d\x60\xc9\x3c\x57\xb4\x80\xe5\x4a\xa5\x86" +
	"\x05\xac\x78\xbb\xcc\x33\xe2\x75\xce\x4d\x29\xad\xec\x6e\xce\x8e\x1a\xc0\xa6\x84\xd3\x02\x96\xcc\x73\x45\x0b\x58" +
	"\xae\x54\x6a\x58\xc0\x8a\xb7\xcb\x7c\xce\x62\xcd\xaa\xea\x01\xeb\xfc\x3d\x37\x59\x32\xcf\x15\x2d\x60\xb9\x52\xa9" +
	"\x61\x01\x2b\xde\x2e\xb3\x59\x8d\xf7\xff\xc1\xfd\x0a\xa5\x05\x96\x4c\xa2\x68\x01\xcb\x95\xb7\x19\x4f\xc1\x8a\xb7" +
	"\xd2\xbc\xdf\x98\x66\x14\xbc\x9d\x83\xe5\x4a\x97\x87\x35\xc7\x34\xa3\xca\x84\xf2\x9a\x49\xbf\xd7\x59\x3d\x58\xf1" +
	"\x4e\x37\x7f\x2f\x1f\xb1\xc5\x0a\x4e\xff\x01\x00\x00\xff\xff\xe9\xcc\xb8\x7d\xfb\x0b\x00\x00")

func bindataLines5x5x2tsvBytes() ([]byte, error) {
	return bindataRead(
		_bindataLines5x5x2tsv,
		"lines_5x5x2.tsv",
	)
}



func bindataLines5x5x2tsv() (*asset, error) {
	bytes, err := bindataLines5x5x2tsvBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{
		name: "lines_5x5x2.tsv",
		size: 3067,
		md5checksum: "",
		mode: os.FileMode(420),
		modTime: time.Unix(1571703559, 0),
	}

	a := &asset{bytes: bytes, info: info}

	return a, nil
}


//
// Asset loads and returns the asset for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
//
func Asset(name string) ([]byte, error) {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[cannonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("Asset %s can't read by error: %v", name, err)
		}
		return a.bytes, nil
	}
	return nil, &os.PathError{Op: "open", Path: name, Err: os.ErrNotExist}
}

//
// MustAsset is like Asset but panics when Asset would return an error.
// It simplifies safe initialization of global variables.
// nolint: deadcode
//
func MustAsset(name string) []byte {
	a, err := Asset(name)
	if err != nil {
		panic("asset: Asset(" + name + "): " + err.Error())
	}

	return a
}

//
// AssetInfo loads and returns the asset info for the given name.
// It returns an error if the asset could not be found or could not be loaded.
//
func AssetInfo(name string) (os.FileInfo, error) {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[cannonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("AssetInfo %s can't read by error: %v", name, err)
		}
		return a.info, nil
	}
	return nil, &os.PathError{Op: "open", Path: name, Err: os.ErrNotExist}
}

//
// AssetNames returns the names of the assets.
// nolint: deadcode
//
func AssetNames() []string {
	names := make([]string, 0, len(_bindata))
	for name := range _bindata {
		names = append(names, name)
	}
	return names
}

//
// _bindata is a table, holding each asset generator, mapped to its name.
//
var _bindata = map[string]func() (*asset, error){
	"lines_5x5x1.tsv": bindataLines5x5x1tsv,
	"lines_5x5x2.tsv": bindataLines5x5x2tsv,
}

//
// AssetDir returns the file names below a certain
// directory embedded in the file by go-bindata.
// For example if you run go-bindata on data/... and data contains the
// following hierarchy:
//     data/
//       foo.txt
//       img/
//         a.png
//         b.png
// then AssetDir("data") would return []string{"foo.txt", "img"}
// AssetDir("data/img") would return []string{"a.png", "b.png"}
// AssetDir("foo.txt") and AssetDir("notexist") would return an error
// AssetDir("") will return []string{"data"}.
//
func AssetDir(name string) ([]string, error) {
	node := _bintree
	if len(name) != 0 {
		cannonicalName := strings.Replace(name, "\\", "/", -1)
		pathList := strings.Split(cannonicalName, "/")
		for _, p := range pathList {
			node = node.Children[p]
			if node == nil {
				return nil, &os.PathError{
					Op: "open",
					Path: name,
					Err: os.ErrNotExist,
				}
			}
		}
	}
	if node.Func != nil {
		return nil, &os.PathError{
			Op: "open",
			Path: name,
			Err: os.ErrNotExist,
		}
	}
	rv := make([]string, 0, len(node.Children))
	for childName := range node.Children {
		rv = append(rv, childName)
	}
	return rv, nil
}


type bintree struct {
	Func     func() (*asset, error)
	Children map[string]*bintree
}

var _bintree = &bintree{Func: nil, Children: map[string]*bintree{
	"lines_5x5x1.tsv": {Func: bindataLines5x5x1tsv, Children: map[string]*bintree{}},
	"lines_5x5x2.tsv": {Func: bindataLines5x5x2tsv, Children: map[string]*bintree{}},
}}

// RestoreAsset restores an asset under the given directory
func RestoreAsset(dir, name string) error {
	data, err := Asset(name)
	if err != nil {
		return err
	}
	info, err := AssetInfo(name)
	if err != nil {
		return err
	}
	err = os.MkdirAll(_filePath(dir, filepath.Dir(name)), os.FileMode(0755))
	if err != nil {
		return err
	}
	err = ioutil.WriteFile(_filePath(dir, name), data, info.Mode())
	if err != nil {
		return err
	}
	return os.Chtimes(_filePath(dir, name), info.ModTime(), info.ModTime())
}

// RestoreAssets restores an asset under the given directory recursively
func RestoreAssets(dir, name string) error {
	children, err := AssetDir(name)
	// File
	if err != nil {
		return RestoreAsset(dir, name)
	}
	// Dir
	for _, child := range children {
		err = RestoreAssets(dir, filepath.Join(name, child))
		if err != nil {
			return err
		}
	}
	return nil
}

func _filePath(dir, name string) string {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	return filepath.Join(append([]string{dir}, strings.Split(cannonicalName, "/")...)...)
}
