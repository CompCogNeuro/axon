// Code generated by go-bindata. DO NOT EDIT.
// sources:
// family_trees.dat

package main


import (
	"bytes"
	"compress/gzip"
	"fmt"
	"io"
	"io/ioutil"
	"os"
	"path/filepath"
	"strings"
	"time"
)

func bindataRead(data []byte, name string) ([]byte, error) {
	gz, err := gzip.NewReader(bytes.NewBuffer(data))
	if err != nil {
		return nil, fmt.Errorf("Read %q: %v", name, err)
	}

	var buf bytes.Buffer
	_, err = io.Copy(&buf, gz)
	clErr := gz.Close()

	if err != nil {
		return nil, fmt.Errorf("Read %q: %v", name, err)
	}
	if clErr != nil {
		return nil, err
	}

	return buf.Bytes(), nil
}


type asset struct {
	bytes []byte
	info  fileInfoEx
}

type fileInfoEx interface {
	os.FileInfo
	MD5Checksum() string
}

type bindataFileInfo struct {
	name        string
	size        int64
	mode        os.FileMode
	modTime     time.Time
	md5checksum string
}

func (fi bindataFileInfo) Name() string {
	return fi.name
}
func (fi bindataFileInfo) Size() int64 {
	return fi.size
}
func (fi bindataFileInfo) Mode() os.FileMode {
	return fi.mode
}
func (fi bindataFileInfo) ModTime() time.Time {
	return fi.modTime
}
func (fi bindataFileInfo) MD5Checksum() string {
	return fi.md5checksum
}
func (fi bindataFileInfo) IsDir() bool {
	return false
}
func (fi bindataFileInfo) Sys() interface{} {
	return nil
}

var _bindataFamilytreesdat = []byte(
	"\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\xbc\x9b\xdf\x6f\xdb\x36\x10\xc7\x9f\xdd\xbf\xa3\x7b\x0b\x82\x88\xf2\xf6" +
	"\x10\x0c\x03\xb2\x34\x4d\x17\x2c\x45\x91\x74\xdb\xc3\x50\x14\x8a\xa7\xd8\x44\x64\x29\x90\x65\x0c\xf9\xef\x0b\xfe" +
	"\x90\x4d\x9e\x24\x8a\xc7\xbb\x04\x79\xa2\x20\x1d\x3f\xfe\xf2\xc8\xfb\x21\xe5\xfb\xa7\xf3\xc5\xfb\xcf\xc5\xb6\x5c" +
	"\xbc\xbf\x6e\x9b\xfd\xf3\xe2\xa7\x8b\x75\x59\x77\xff\x8a\xf3\xb3\x93\xb3\x6f\xbf\x8a\xf3\xe5\xc9\x2f\xbf\xb9\x17" +
	"\xb3\x6f\xee\x48\x78\xa3\xdc\x1b\x2d\xbd\xd1\xcf\xce\x28\x3b\x39\xf3\x46\x99\x37\x12\xde\x28\xf7\x46\x4b\x6f\xe4" +
	"\xda\x14\x9e\x4d\xe1\xd9\x14\x9e\x4d\xe1\xd9\x14\x9e\x4d\xe1\xd9\xcc\x3d\x9b\xb9\x67\x33\xf7\x6c\xe6\x9e\xcd\xdc" +
	"\xb3\x99\x6b\x9b\x77\x65\x55\x74\xb2\xa9\x8f\xca\x0a\xad\xac\x77\x3d\x83\x37\x0a\x78\x21\x87\x17\x96\xf0\x02\x98" +
	"\xcc\x68\xed\x5d\xc8\xe0\x05\x01\x2f\xe4\xf0\xc2\x12\x5e\x50\xb3\x7c\x29\x3a\x39\xe2\x2b\xee\xe5\x0c\xdc\x26\xc0" +
	"\x38\x07\xe3\x25\x18\xfb\xd3\x98\xdf\xe2\x8e\x33\x30\x16\x60\x9c\x83\xf1\x12\x8c\x7d\xfb\x02\xd8\x17\xc0\xbe\x00" +
	"\xf6\x05\xb0\x2f\x80\x7d\x01\xec\xe7\xc0\x7e\x0e\xec\xe7\xc0\x7e\x0e\xec\xe7\xc0\xbe\xf2\xac\x77\xdf\x3f\x9c\x2f" +
	"\x2e\x37\xad\xdc\x75\xcd\xe9\x3f\xf2\xb1\x3c\xfd\x52\xd6\xf5\xcb\xe2\xaa\x5e\x57\x72\xb7\x59\x64\x8b\xb3\x84\xbf" +
	"\xb1\xa7\x50\x96\x34\x96\x26\x39\xfd\xb4\xdf\x3d\x9c\x5a\xc2\x03\x16\xd2\x1c\x0f\x94\xc5\xba\x2d\x5a\x59\x18\xac" +
	"\xbb\xe6\xc1\x41\xc2\x4c\x8c\x9f\x7e\xe2\x5e\x8d\x74\x51\xff\xf7\x62\x56\xcf\x08\x25\x3d\x2a\x1e\xa9\x50\x96\x1c" +
	"\xb7\x92\x46\x2a\x85\x08\xb4\xc2\x71\x91\x99\x7a\xaf\x92\x65\xdb\x5a\x5f\xff\xd8\x16\xf5\xea\x65\xf1\x47\x57\x54" +
	"\xb2\xa8\x93\xa6\xc7\xcb\x3b\xb8\x5f\x63\x19\x14\xa3\x95\x41\x8c\xc2\x9a\x9a\x9e\x0c\xd5\x7b\x56\xdb\x19\xa9\x6e" +
	"\x8b\x76\x5d\x8e\x20\x31\xb8\x70\xbc\x95\x7e\xff\xad\x4b\xeb\x54\x6d\x37\x40\xe2\x01\x8a\xb6\xa4\x91\xae\xb6\xb2" +
	"\x92\xd6\xa7\xae\x65\x5d\x44\x2e\xdd\xd4\x24\xe4\x0d\xab\xa1\x14\x88\x91\xc9\xe0\x45\x43\xf1\x20\x0d\x9e\xd2\x50" +
	"\x7f\xcb\xd5\x93\xf5\xf2\x9b\x62\x5b\xee\x46\x8f\xcf\xd8\xc9\xe6\xef\x9b\xbd\xa3\xf7\xa8\x95\x5d\xbd\x3f\xf7\x2b" +
	"\x89\x59\xbe\xb1\x49\xc8\x5a\x69\x28\x4d\x62\x94\xd2\x7c\x28\x28\x1e\x24\xef\x49\x7b\xa4\xef\x57\x4f\x46\xa9\x9b" +
	"\xb2\xae\x03\xc1\x2f\x66\x46\xf2\xfa\x69\x26\x05\xd2\x67\x09\xfb\xd5\xd3\x24\x13\x0f\xd1\xec\x5d\x9a\xe9\x6b\xb3" +
	"\x2d\x76\xd6\xa5\x2e\xea\x75\x59\x61\x7d\x0a\x4e\x43\x5e\x40\x9b\x27\x28\x14\x23\x96\x41\x44\x63\xf1\x40\x1d\x9e" +
	"\xf6\xf2\xcf\xfb\xa6\xd6\x47\x3a\x2d\xf9\x24\xc7\x99\x43\xe0\xfb\x58\x74\x9b\x91\xd4\x13\xf7\xf3\x19\xf2\x96\x81" +
	"\x50\x1f\x8a\xfd\xfa\x54\x1f\xa5\x64\xad\x88\x6a\x39\x87\xfa\x8c\x5a\xb4\x0d\x98\xa2\xd6\x5d\xf3\xa0\x5d\x2a\x32" +
	"\xfc\xcd\x4d\x41\x8c\xca\x6e\xa2\xa0\xa5\x52\xc5\x43\x6a\x9e\xc0\x90\xde\x79\x32\x69\x87\x8a\x8b\x7d\x0c\x41\x37" +
	"\xf4\xc4\xb1\x9e\x51\x4b\x37\xcc\x11\x52\xfc\x9c\x98\xe6\x99\x28\xa3\x48\xcc\xc2\x8d\x94\x32\x3c\xe2\x60\x4b\x19" +
	"\x2d\x93\x5e\xba\x41\x30\xe6\xab\xdb\xa3\xf1\x8e\xc1\x78\x4e\x25\xda\x5e\x4b\x2c\xf8\x94\x3b\xc5\x27\x52\x4c\x00" +
	"\x63\x4f\x39\x29\xa7\x16\x0a\x55\xed\x0d\x19\x98\x36\x84\x2b\x95\x76\x29\x44\xda\xc2\x50\x46\x4d\x3d\xe5\xa6\x2d" +
	"\xe9\x6a\x1d\x21\x38\xd5\x32\x47\x82\xf2\xab\xcb\xa6\x92\x53\xc9\x70\xfc\x8c\xc4\x04\xd5\x64\x08\x8a\xc4\x28\x35" +
	"\x5d\x5f\xc5\x4c\xc8\x90\x09\x03\xa1\xb4\x57\x5d\x6e\x8a\xb6\x6a\x3a\xb2\x56\x44\xb5\x6c\x36\xa5\x59\x62\xd5\xa2" +
	"\xf7\x2f\x30\xd5\xa8\xce\x85\xab\x47\x62\x29\x4a\xcb\xd1\xb3\x7e\xff\x55\x8f\x46\x24\x7c\x21\xea\x62\x30\x94\x0b" +
	"\x40\x24\xed\x52\xf7\xcd\xf3\x86\x5c\xb3\x93\xa5\xd2\x54\x06\x85\xaa\x95\x22\xe1\xd4\xca\xf4\xd1\x61\x71\xc5\x9f" +
	"\x23\xe0\x8a\xab\xdb\x46\x9d\xe6\xde\xcb\x06\xa4\x29\xae\x72\xc1\x11\x69\xa4\xb0\x4a\xf7\x0b\xae\xc2\x2a\xa8\xd4" +
	"\x9b\x96\xa1\x87\xc5\xbb\x97\xbb\x81\x4c\x49\x16\x83\xcf\xe0\x64\xfa\xbd\x6d\x80\x83\xa7\x33\x11\x9a\xea\xce\x3b" +
	"\x22\x44\xf1\xc9\x9f\x44\x4d\x16\x9f\xda\x9d\x34\x20\xa1\x4d\xcd\x22\xa8\x23\x15\xa2\x00\x7d\xe5\x4a\xdd\x69\xbe" +
	"\x26\x29\xf5\x2a\xa5\xba\x03\xa5\xdc\x1c\xd9\xd0\x0f\x61\xe0\xf0\x86\x4e\xd5\xbf\xe4\x1b\xaf\xd6\x19\xde\x65\x60" +
	"\x79\x9d\x8c\x53\xaf\xdf\xd8\x1b\x51\xdc\xcf\x67\xa9\x05\x8f\xd5\x71\x04\xd5\x9b\x35\x12\xdc\x3a\x46\xee\x42\x3d" +
	"\x7d\xa6\x8e\x13\xa6\x8d\xa0\x3c\x3d\x9c\x96\xf3\xd4\x0b\x71\x2e\x65\x5f\xd0\xe2\xda\x08\xf4\x9a\x61\xf2\x29\x27" +
	"\x0d\xd6\x1e\x85\x78\x97\x3d\xce\xc0\x12\xb7\x5d\xa9\xb0\x6d\x84\x57\xec\xba\xb8\x6d\x84\x74\xb5\xd8\xdb\x2e\x6e" +
	"\xbd\x27\x77\x69\x6f\x8a\x98\x3a\xe6\x40\x2b\x93\x52\x85\x7b\x1b\x6f\x56\xad\x7b\xbd\x0d\xbd\x7c\x53\xb9\x67\xec" +
	"\x84\x2c\x4d\x6c\x47\xa8\xd9\xde\x06\x21\xcc\x62\xef\xf1\x7a\x1b\x91\x6a\x51\xb7\x5e\xac\x5a\x66\x09\x95\xaf\x87" +
	"\x1b\x41\x58\xd1\x92\x33\x42\x27\xb1\x4a\xe9\xb8\xb0\xb7\x11\x9c\x8e\x8b\x5e\xba\x94\xef\x11\x5c\x8c\x74\x98\xf1" +
	"\x94\x38\xb5\xe3\x42\x28\xa8\xa6\x2c\xba\x1d\x17\xa2\x56\xd4\xfe\x14\xd4\x4a\x2d\x9f\x72\xf2\xa4\xd6\xd4\x94\x34" +
	"\xc9\x6d\x08\x57\x28\x5d\x24\xa3\xdb\x8a\xe3\x08\x84\xbe\x88\x73\x18\xfc\x55\xaf\xaa\x52\x15\xee\x97\x9b\x3d\xd3" +
	"\x69\x10\x52\x2f\x68\xc5\xc1\xba\xd8\xd7\x9d\x4a\xf4\x6e\xca\xd0\x57\x2e\xb4\x83\x3d\xf2\xa5\xc4\xa1\xeb\xf2\xb9" +
	"\x7c\xde\x94\xff\x4f\x46\x64\x16\xff\x8d\xfd\x71\xce\xe7\x40\x33\x58\xe9\x78\xa9\x58\xe6\x0b\xc1\x20\x16\xf1\x90" +
	"\x4e\xc2\xd2\x45\x4d\x94\x58\x7c\x2d\xb4\x79\x2a\x75\x56\x99\x3d\x78\xb5\x95\x5f\x9b\x2d\xd3\x69\x95\x12\xbd\xb3" +
	"\x05\x68\x55\x59\xb1\x70\x07\x16\x4b\xb6\x02\xef\x77\xbf\xea\x4a\xa2\x9a\x9f\x3b\x95\x4a\x7f\xe7\x99\xc0\x44\x6d" +
	"\x7d\x84\x98\x6c\xa9\x45\x50\x8a\xb3\x14\xcc\x40\x52\x1c\x1d\x72\x68\x29\x28\x22\xe4\x58\xb0\xd8\xa0\x43\x09\x86" +
	"\xf8\xa0\x23\x57\x65\x20\x5d\x7f\xd3\x93\xd4\x8b\x3a\x61\x2e\x0a\x5f\x1a\x57\x1f\x76\x42\x5c\x14\xb5\x52\xb9\x6c" +
	"\xdc\x89\x91\x8b\xd8\x93\x42\x61\xd9\x8c\x94\x1c\x7b\x68\xb9\xf2\x30\xf6\x58\x2e\xbd\x17\xaf\x65\x7d\x51\xaf\xd9" +
	"\xb0\x62\xc1\xc0\x1e\xf5\x43\xa2\x5a\x47\x74\x61\xf1\x2a\x87\xbd\x1f\x14\x93\xb8\x62\xe6\x4e\xe3\xb2\x61\x31\x81" +
	"\x0a\xb7\x46\x38\xaa\x43\x60\x24\xa8\x45\x6d\x6d\x8d\x71\xf5\x11\x48\xd5\x87\x26\x37\x0d\x53\xf1\x68\x14\x93\x9b" +
	"\x52\xf7\x21\xa5\xf3\x10\xd8\x87\xaa\xbc\xc7\x36\x1c\xf8\x9c\x1c\x36\x1c\xee\x9a\x87\xc3\xbf\x69\x91\xbf\xe1\x25" +
	"\xf7\x75\x9d\xb7\x4a\x1a\x2a\xd4\x7f\x8c\x9d\x8c\x8c\xec\x34\xb1\xfa\xcf\xaf\xcb\x91\x7f\x1f\x8b\x9d\x25\x21\x07" +
	"\x9d\xa4\xb2\x87\x82\xda\x7b\x69\x5f\x0d\xf1\xb4\x21\x33\x0f\xaa\x7f\xb1\x3b\xfe\x7d\x31\x6f\x5e\x15\x65\xf1\xdd" +
	"\x8f\x00\x00\x00\xff\xff\xcf\x95\xd7\xc6\x6d\x40\x00\x00")

func bindataFamilytreesdatBytes() ([]byte, error) {
	return bindataRead(
		_bindataFamilytreesdat,
		"family_trees.dat",
	)
}



func bindataFamilytreesdat() (*asset, error) {
	bytes, err := bindataFamilytreesdatBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{
		name: "family_trees.dat",
		size: 16493,
		md5checksum: "",
		mode: os.FileMode(420),
		modTime: time.Unix(1567749880, 0),
	}

	a := &asset{bytes: bytes, info: info}

	return a, nil
}


//
// Asset loads and returns the asset for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
//
func Asset(name string) ([]byte, error) {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[cannonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("Asset %s can't read by error: %v", name, err)
		}
		return a.bytes, nil
	}
	return nil, &os.PathError{Op: "open", Path: name, Err: os.ErrNotExist}
}

//
// MustAsset is like Asset but panics when Asset would return an error.
// It simplifies safe initialization of global variables.
// nolint: deadcode
//
func MustAsset(name string) []byte {
	a, err := Asset(name)
	if err != nil {
		panic("asset: Asset(" + name + "): " + err.Error())
	}

	return a
}

//
// AssetInfo loads and returns the asset info for the given name.
// It returns an error if the asset could not be found or could not be loaded.
//
func AssetInfo(name string) (os.FileInfo, error) {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[cannonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("AssetInfo %s can't read by error: %v", name, err)
		}
		return a.info, nil
	}
	return nil, &os.PathError{Op: "open", Path: name, Err: os.ErrNotExist}
}

//
// AssetNames returns the names of the assets.
// nolint: deadcode
//
func AssetNames() []string {
	names := make([]string, 0, len(_bindata))
	for name := range _bindata {
		names = append(names, name)
	}
	return names
}

//
// _bindata is a table, holding each asset generator, mapped to its name.
//
var _bindata = map[string]func() (*asset, error){
	"family_trees.dat": bindataFamilytreesdat,
}

//
// AssetDir returns the file names below a certain
// directory embedded in the file by go-bindata.
// For example if you run go-bindata on data/... and data contains the
// following hierarchy:
//     data/
//       foo.txt
//       img/
//         a.png
//         b.png
// then AssetDir("data") would return []string{"foo.txt", "img"}
// AssetDir("data/img") would return []string{"a.png", "b.png"}
// AssetDir("foo.txt") and AssetDir("notexist") would return an error
// AssetDir("") will return []string{"data"}.
//
func AssetDir(name string) ([]string, error) {
	node := _bintree
	if len(name) != 0 {
		cannonicalName := strings.Replace(name, "\\", "/", -1)
		pathList := strings.Split(cannonicalName, "/")
		for _, p := range pathList {
			node = node.Children[p]
			if node == nil {
				return nil, &os.PathError{
					Op: "open",
					Path: name,
					Err: os.ErrNotExist,
				}
			}
		}
	}
	if node.Func != nil {
		return nil, &os.PathError{
			Op: "open",
			Path: name,
			Err: os.ErrNotExist,
		}
	}
	rv := make([]string, 0, len(node.Children))
	for childName := range node.Children {
		rv = append(rv, childName)
	}
	return rv, nil
}


type bintree struct {
	Func     func() (*asset, error)
	Children map[string]*bintree
}

var _bintree = &bintree{Func: nil, Children: map[string]*bintree{
	"family_trees.dat": {Func: bindataFamilytreesdat, Children: map[string]*bintree{}},
}}

// RestoreAsset restores an asset under the given directory
func RestoreAsset(dir, name string) error {
	data, err := Asset(name)
	if err != nil {
		return err
	}
	info, err := AssetInfo(name)
	if err != nil {
		return err
	}
	err = os.MkdirAll(_filePath(dir, filepath.Dir(name)), os.FileMode(0755))
	if err != nil {
		return err
	}
	err = ioutil.WriteFile(_filePath(dir, name), data, info.Mode())
	if err != nil {
		return err
	}
	return os.Chtimes(_filePath(dir, name), info.ModTime(), info.ModTime())
}

// RestoreAssets restores an asset under the given directory recursively
func RestoreAssets(dir, name string) error {
	children, err := AssetDir(name)
	// File
	if err != nil {
		return RestoreAsset(dir, name)
	}
	// Dir
	for _, child := range children {
		err = RestoreAssets(dir, filepath.Join(name, child))
		if err != nil {
			return err
		}
	}
	return nil
}

func _filePath(dir, name string) string {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	return filepath.Join(append([]string{dir}, strings.Split(cannonicalName, "/")...)...)
}
