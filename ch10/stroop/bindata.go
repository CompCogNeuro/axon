// Code generated by go-bindata. DO NOT EDIT.
// sources:
// stroop_train.tsv
// stroop_test.tsv
// stroop_soa.tsv

package main


import (
	"bytes"
	"compress/gzip"
	"fmt"
	"io"
	"io/ioutil"
	"os"
	"path/filepath"
	"strings"
	"time"
)

func bindataRead(data []byte, name string) ([]byte, error) {
	gz, err := gzip.NewReader(bytes.NewBuffer(data))
	if err != nil {
		return nil, fmt.Errorf("Read %q: %v", name, err)
	}

	var buf bytes.Buffer
	_, err = io.Copy(&buf, gz)
	clErr := gz.Close()

	if err != nil {
		return nil, fmt.Errorf("Read %q: %v", name, err)
	}
	if clErr != nil {
		return nil, err
	}

	return buf.Bytes(), nil
}


type asset struct {
	bytes []byte
	info  fileInfoEx
}

type fileInfoEx interface {
	os.FileInfo
	MD5Checksum() string
}

type bindataFileInfo struct {
	name        string
	size        int64
	mode        os.FileMode
	modTime     time.Time
	md5checksum string
}

func (fi bindataFileInfo) Name() string {
	return fi.name
}
func (fi bindataFileInfo) Size() int64 {
	return fi.size
}
func (fi bindataFileInfo) Mode() os.FileMode {
	return fi.mode
}
func (fi bindataFileInfo) ModTime() time.Time {
	return fi.modTime
}
func (fi bindataFileInfo) MD5Checksum() string {
	return fi.md5checksum
}
func (fi bindataFileInfo) IsDir() bool {
	return false
}
func (fi bindataFileInfo) Sys() interface{} {
	return nil
}

var _bindataStrooptraintsv = []byte(
	"\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\x8a\xf7\xb0\xe2\x54\xf1\x4b\xcc\x4d\xe5\x54\x75\xce\xcf\xc9\x2f\x2a\x8e" +
	"\x36\xb2\x32\xd0\x31\x88\xb5\x31\xb2\x32\xd4\x31\xb2\x43\x11\x35\x8c\xe5\x54\x0d\xcf\x2f\x4a\xc1\x50\x83\x10\x04" +
	"\x29\xf1\x2f\x2d\x29\x28\x2d\x41\x57\x83\x24\x0a\x52\x14\xe0\xe6\x8c\xae\x02\x26\x04\x92\x76\x2b\x4a\x2d\xe4\x8a" +
	"\x77\xb1\xe2\x74\x2f\xe7\x34\xe0\x34\xe0\x34\x84\x62\x10\x69\x4c\xa6\x44\x10\x44\x02\x21\x45\xbe\x44\x7a\x32\xd4" +
	"\x6c\x84\x94\x11\x7e\x89\xa2\x64\xb8\x7b\x40\x34\x01\x09\x40\x00\x00\x00\xff\xff\xc8\xfd\xb6\x8e\x96\x01\x00\x00" +
	"")

func bindataStrooptraintsvBytes() ([]byte, error) {
	return bindataRead(
		_bindataStrooptraintsv,
		"stroop_train.tsv",
	)
}



func bindataStrooptraintsv() (*asset, error) {
	bytes, err := bindataStrooptraintsvBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{
		name: "stroop_train.tsv",
		size: 406,
		md5checksum: "",
		mode: os.FileMode(420),
		modTime: time.Unix(1573778278, 0),
	}

	a := &asset{bytes: bytes, info: info}

	return a, nil
}

var _bindataStrooptesttsv = []byte(
	"\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\x8a\xf7\xb0\xe2\x54\xf1\x4b\xcc\x4d\xe5\x54\x71\x2f\xca\x2f\x2d\xe0\x54" +
	"\x75\xce\xcf\xc9\x2f\x2a\x8e\x36\xb2\x32\xd0\x31\x88\xb5\x31\xb2\x32\xd4\x31\xb2\x43\x11\x35\x8c\xe5\x54\x0d\xcf" +
	"\x2f\x4a\xc1\x50\x83\x10\x04\x29\xf1\x2f\x2d\x29\x28\x2d\x41\x57\x83\x24\x0a\x52\x14\xe0\xe6\x8c\xae\x02\x26\x64" +
	"\x18\xcb\x15\xef\x62\xc5\x09\x32\x34\xde\xb9\xa4\x28\x07\xcc\xe2\x34\x00\x43\x43\x18\x46\x52\x92\x9f\x97\x06\x51" +
	"\x62\x88\x47\x49\x3a\xcc\x14\x43\x0c\x25\x60\x1f\x42\x6c\x02\x33\xa1\x92\x10\xb3\x0c\x39\x0d\x90\x15\x81\xec\x42" +
	"\x28\x32\xc4\xa5\x28\x1d\xc5\x24\x43\xb8\x22\x40\x00\x00\x00\xff\xff\x74\xc9\x94\x4d\x75\x01\x00\x00")

func bindataStrooptesttsvBytes() ([]byte, error) {
	return bindataRead(
		_bindataStrooptesttsv,
		"stroop_test.tsv",
	)
}



func bindataStrooptesttsv() (*asset, error) {
	bytes, err := bindataStrooptesttsvBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{
		name: "stroop_test.tsv",
		size: 373,
		md5checksum: "",
		mode: os.FileMode(420),
		modTime: time.Unix(1573778278, 0),
	}

	a := &asset{bytes: bytes, info: info}

	return a, nil
}

var _bindataStroopsoatsv = []byte(
	"\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\x9c\x96\x4d\x6b\xdb\x40\x10\x86\xcf\xdb\xdf\x91\xdc\x52\xd0\x6e\x16\xb3" +
	"\x98\x52\x48\x5d\x9a\x9e\x9a\xd0\x1c\x72\x28\x61\x31\xaa\x9a\x06\x64\x2b\x28\x12\x69\xc0\x3f\xbe\xa8\xfe\xda\xd9" +
	"\xd9\x77\x18\xf7\x90\x04\xe4\xcd\xc3\xb3\x9e\x99\x57\x13\xbf\xce\xcd\xd9\xb7\xe5\xaa\x31\xe7\x8b\xae\xed\xfa\x97" +
	"\x1f\x6e\x5e\x5d\x54\x0f\x1f\xdc\xdc\x5e\xb8\x8f\xe4\xa9\x7d\x30\xe7\xf7\x5d\xff\x93\x9d\x39\x3e\x9c\x8e\xdc\x8c" +
	"\xc3\xf3\x38\xe4\x67\x92\xa7\xd3\xa1\xdb\x2f\x8b\xfc\xc4\xfe\x91\x7d\x30\x9b\xbb\x9b\x2b\xb3\x59\x2d\xff\xc4\xfa" +
	"\xad\x6e\x9b\x17\x73\x76\xdd\x77\xe3\xb3\xd9\xd4\x63\x1f\x87\xfe\x69\xd9\x0e\x6f\xcf\x4d\x5c\x8f\xab\x77\xf1\xf3" +
	"\xdc\xdc\xc6\x7a\x1d\xef\xe3\x75\x6c\x96\x7d\xfb\xf6\x32\x3c\xad\x4c\x65\x2a\x63\x77\xbf\xa7\xbf\xef\x5d\x65\x5c" +
	"\xb5\x3d\x59\x77\xeb\x5f\xed\x53\x3d\xc4\xbb\x9b\xab\x38\x7d\x50\x51\x4a\xbb\x1c\x9a\x1d\xc4\x16\x20\x4a\x8a\xe0" +
	"\x62\x67\xc6\xce\x4a\x14\x3b\xd3\xbb\xd8\x19\x72\xe1\x14\xc9\xc5\x19\xeb\x8a\x14\x77\x82\x8b\x83\x2e\x8c\x22\xb8" +
	"\x04\x13\x4a\x8c\xa0\x17\x09\xc8\x83\x31\x04\x0d\x6f\x7c\x09\xe1\xf5\x1a\x1e\x69\x10\xc6\xa7\x6e\xf8\x8d\x21\xa8" +
	"\xd5\x48\xa3\x2d\x62\x4f\x6e\xb2\xfd\xc7\x3d\xa2\x7c\x11\x9f\x03\xa0\x02\xba\x06\x23\x60\x85\x72\x49\x83\x5a\x01" +
	"\x15\x94\x11\xb0\x02\xea\x70\xda\x9a\xa2\x05\xec\x6f\xce\x10\x3c\xc0\xd4\xd3\x71\x95\x3d\xd0\xcc\x73\x06\xf6\x40" +
	"\x49\xe8\x58\x67\x41\x0f\x98\x83\x79\x0c\x7e\xcf\xe6\x6c\xeb\x52\x8c\xe4\xc7\x7e\x6c\xd6\xc7\x34\xb5\x14\x43\x54" +
	"\x38\x45\x8b\x11\x6c\x68\x79\x52\xcc\xf4\x89\xd6\x26\xab\x90\x8c\x91\x6c\x48\xd3\x12\x8c\x3b\xc1\xc6\x61\x1b\x86" +
	"\x11\x6c\xd2\x29\x4e\x21\x41\xaf\x12\xa0\x09\x83\x08\x22\x69\xa2\xa5\x0c\xaf\x17\xf1\x50\x84\x40\x78\x38\xa7\x14" +
	"\xd8\x73\xa4\xe3\xf4\xe9\x9c\x10\x7c\x4e\x80\x12\xf0\x26\x0c\xa1\xcb\xe7\x84\x10\xd4\x12\xb0\xae\x0c\xa1\x4d\xe8" +
	"\x84\x41\x9b\x54\xf4\xc0\xad\xce\x21\xda\x8c\x4e\x21\x33\xbd\x09\x8c\x00\x0e\xd1\xa6\x74\x02\x71\xac\xc5\xa0\x09" +
	"\x8e\xc6\x04\xf2\xda\xc7\x45\x7c\x4c\x4c\xf6\x1e\x7b\xd2\x21\xa7\x5f\x7b\xbe\xf4\x3a\x4a\x39\xa8\xd8\x04\x70\x84" +
	"\x28\x29\x82\xcb\xbe\x40\x8c\x32\x7d\xeb\x5a\x97\x43\x85\x14\x14\xc9\x65\xd7\xb6\x9c\xe2\x4e\x70\x71\xd0\x85\x51" +
	"\x04\x97\xed\x1c\x33\x46\xd0\x8b\x04\xe4\xc1\x18\x82\xc6\x36\xd3\x18\xc2\xeb\x35\x3c\xd2\x20\x0c\x9a\xce\x39\x04" +
	"\xb5\x1a\x69\x34\xfc\xa6\x99\x7e\xca\x17\xf1\x39\x00\x2a\xa0\x6b\x30\x02\x56\x28\x97\x34\xa8\x15\x50\x41\x19\x01" +
	"\x2b\xa0\x0e\xa7\xad\x29\x5a\xc0\xfe\xe6\x0c\xc1\x03\x4c\x3d\x1d\x57\xd9\x03\xcd\x3c\x67\x60\x0f\x94\x84\x8e\x75" +
	"\x16\xf4\x80\x39\x98\xc7\x20\x7a\x39\x14\x22\x39\xdb\x79\x2f\x29\xa6\xf8\x7a\x28\x65\xb2\x8c\x11\x6c\x68\x79\xb2" +
	"\x9d\x57\x6d\x93\x55\x48\xc6\x48\x36\xa4\x69\xb3\x9d\x57\x6f\xe3\xb0\x0d\xc3\x08\x36\xe9\x14\xd3\xad\x57\xad\x12" +
	"\xa0\x09\x83\x08\x22\x69\xa2\xd1\xad\x57\x2d\xe2\xa1\x08\x81\xe0\xd5\x99\x87\x33\x59\x9d\x2f\xff\x27\x9d\xc9\xde" +
	"\x7b\x09\xa6\x30\x97\x80\x37\x61\x08\x5d\x3e\x93\xbd\x57\x2b\x01\xeb\xca\x10\xda\x84\xa6\x5b\xaf\xd6\x03\xb7\x3a" +
	"\x87\x68\x33\x9a\x6e\xbd\x6a\x13\x18\x01\x1c\xa2\x4d\x69\xba\xf5\x6a\x4d\x70\x34\xfe\x83\xfc\x0d\x00\x00\xff\xff" +
	"\x26\x18\x0f\x4b\x37\x17\x00\x00")

func bindataStroopsoatsvBytes() ([]byte, error) {
	return bindataRead(
		_bindataStroopsoatsv,
		"stroop_soa.tsv",
	)
}



func bindataStroopsoatsv() (*asset, error) {
	bytes, err := bindataStroopsoatsvBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{
		name: "stroop_soa.tsv",
		size: 5943,
		md5checksum: "",
		mode: os.FileMode(420),
		modTime: time.Unix(1573778278, 0),
	}

	a := &asset{bytes: bytes, info: info}

	return a, nil
}


//
// Asset loads and returns the asset for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
//
func Asset(name string) ([]byte, error) {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[cannonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("Asset %s can't read by error: %v", name, err)
		}
		return a.bytes, nil
	}
	return nil, &os.PathError{Op: "open", Path: name, Err: os.ErrNotExist}
}

//
// MustAsset is like Asset but panics when Asset would return an error.
// It simplifies safe initialization of global variables.
// nolint: deadcode
//
func MustAsset(name string) []byte {
	a, err := Asset(name)
	if err != nil {
		panic("asset: Asset(" + name + "): " + err.Error())
	}

	return a
}

//
// AssetInfo loads and returns the asset info for the given name.
// It returns an error if the asset could not be found or could not be loaded.
//
func AssetInfo(name string) (os.FileInfo, error) {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[cannonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("AssetInfo %s can't read by error: %v", name, err)
		}
		return a.info, nil
	}
	return nil, &os.PathError{Op: "open", Path: name, Err: os.ErrNotExist}
}

//
// AssetNames returns the names of the assets.
// nolint: deadcode
//
func AssetNames() []string {
	names := make([]string, 0, len(_bindata))
	for name := range _bindata {
		names = append(names, name)
	}
	return names
}

//
// _bindata is a table, holding each asset generator, mapped to its name.
//
var _bindata = map[string]func() (*asset, error){
	"stroop_train.tsv": bindataStrooptraintsv,
	"stroop_test.tsv":  bindataStrooptesttsv,
	"stroop_soa.tsv":   bindataStroopsoatsv,
}

//
// AssetDir returns the file names below a certain
// directory embedded in the file by go-bindata.
// For example if you run go-bindata on data/... and data contains the
// following hierarchy:
//     data/
//       foo.txt
//       img/
//         a.png
//         b.png
// then AssetDir("data") would return []string{"foo.txt", "img"}
// AssetDir("data/img") would return []string{"a.png", "b.png"}
// AssetDir("foo.txt") and AssetDir("notexist") would return an error
// AssetDir("") will return []string{"data"}.
//
func AssetDir(name string) ([]string, error) {
	node := _bintree
	if len(name) != 0 {
		cannonicalName := strings.Replace(name, "\\", "/", -1)
		pathList := strings.Split(cannonicalName, "/")
		for _, p := range pathList {
			node = node.Children[p]
			if node == nil {
				return nil, &os.PathError{
					Op: "open",
					Path: name,
					Err: os.ErrNotExist,
				}
			}
		}
	}
	if node.Func != nil {
		return nil, &os.PathError{
			Op: "open",
			Path: name,
			Err: os.ErrNotExist,
		}
	}
	rv := make([]string, 0, len(node.Children))
	for childName := range node.Children {
		rv = append(rv, childName)
	}
	return rv, nil
}


type bintree struct {
	Func     func() (*asset, error)
	Children map[string]*bintree
}

var _bintree = &bintree{Func: nil, Children: map[string]*bintree{
	"stroop_soa.tsv": {Func: bindataStroopsoatsv, Children: map[string]*bintree{}},
	"stroop_test.tsv": {Func: bindataStrooptesttsv, Children: map[string]*bintree{}},
	"stroop_train.tsv": {Func: bindataStrooptraintsv, Children: map[string]*bintree{}},
}}

// RestoreAsset restores an asset under the given directory
func RestoreAsset(dir, name string) error {
	data, err := Asset(name)
	if err != nil {
		return err
	}
	info, err := AssetInfo(name)
	if err != nil {
		return err
	}
	err = os.MkdirAll(_filePath(dir, filepath.Dir(name)), os.FileMode(0755))
	if err != nil {
		return err
	}
	err = ioutil.WriteFile(_filePath(dir, name), data, info.Mode())
	if err != nil {
		return err
	}
	return os.Chtimes(_filePath(dir, name), info.ModTime(), info.ModTime())
}

// RestoreAssets restores an asset under the given directory recursively
func RestoreAssets(dir, name string) error {
	children, err := AssetDir(name)
	// File
	if err != nil {
		return RestoreAsset(dir, name)
	}
	// Dir
	for _, child := range children {
		err = RestoreAssets(dir, filepath.Join(name, child))
		if err != nil {
			return err
		}
	}
	return nil
}

func _filePath(dir, name string) string {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	return filepath.Join(append([]string{dir}, strings.Split(cannonicalName, "/")...)...)
}
