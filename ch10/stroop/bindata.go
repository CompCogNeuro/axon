// Code generated by go-bindata. DO NOT EDIT.
// sources:
// stroop_train.tsv
// stroop_test.tsv
// stroop_soa.tsv

package main


import (
	"bytes"
	"compress/gzip"
	"fmt"
	"io"
	"io/ioutil"
	"os"
	"path/filepath"
	"strings"
	"time"
)

func bindataRead(data []byte, name string) ([]byte, error) {
	gz, err := gzip.NewReader(bytes.NewBuffer(data))
	if err != nil {
		return nil, fmt.Errorf("Read %q: %v", name, err)
	}

	var buf bytes.Buffer
	_, err = io.Copy(&buf, gz)
	clErr := gz.Close()

	if err != nil {
		return nil, fmt.Errorf("Read %q: %v", name, err)
	}
	if clErr != nil {
		return nil, err
	}

	return buf.Bytes(), nil
}


type asset struct {
	bytes []byte
	info  fileInfoEx
}

type fileInfoEx interface {
	os.FileInfo
	MD5Checksum() string
}

type bindataFileInfo struct {
	name        string
	size        int64
	mode        os.FileMode
	modTime     time.Time
	md5checksum string
}

func (fi bindataFileInfo) Name() string {
	return fi.name
}
func (fi bindataFileInfo) Size() int64 {
	return fi.size
}
func (fi bindataFileInfo) Mode() os.FileMode {
	return fi.mode
}
func (fi bindataFileInfo) ModTime() time.Time {
	return fi.modTime
}
func (fi bindataFileInfo) MD5Checksum() string {
	return fi.md5checksum
}
func (fi bindataFileInfo) IsDir() bool {
	return false
}
func (fi bindataFileInfo) Sys() interface{} {
	return nil
}

var _bindataStrooptraintsv = []byte(
	"\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\x8a\xf7\xb0\xe2\x54\xf1\x4b\xcc\x4d\xe5\x54\x75\xce\xcf\xc9\x2f\x2a\x8e" +
	"\x36\xb2\x32\xd0\x31\x88\xb5\x31\xb2\x32\xd4\x31\xb2\x43\x11\x35\x8c\xe5\x54\x0d\xcf\x2f\x4a\xc1\x50\x83\x10\x04" +
	"\x29\xf1\x2f\x2d\x29\x28\x2d\x41\x57\x83\x24\x0a\x52\x14\xe0\xe6\x8c\xae\x02\x26\x04\x92\x76\x2b\x4a\x2d\xe4\x8a" +
	"\x77\xb1\xe2\x74\x2f\xe7\x34\xe0\x34\xe0\x34\x84\x62\x10\x69\x06\x96\x08\x82\x48\x20\xa4\x60\x12\xe9\xc9\x50\x95" +
	"\x08\x29\x23\xb0\x44\x51\x32\xdc\x10\x10\x0d\x91\xe0\x02\x04\x00\x00\xff\xff\xec\xf3\xab\x02\x01\x01\x00\x00")

func bindataStrooptraintsvBytes() ([]byte, error) {
	return bindataRead(
		_bindataStrooptraintsv,
		"stroop_train.tsv",
	)
}



func bindataStrooptraintsv() (*asset, error) {
	bytes, err := bindataStrooptraintsvBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{
		name: "stroop_train.tsv",
		size: 257,
		md5checksum: "",
		mode: os.FileMode(420),
		modTime: time.Unix(1573847150, 0),
	}

	a := &asset{bytes: bytes, info: info}

	return a, nil
}

var _bindataStrooptesttsv = []byte(
	"\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\x8a\xf7\xb0\xe2\x54\xf1\x4b\xcc\x4d\xe5\x54\x71\x2f\xca\x2f\x2d\xe0\x54" +
	"\x75\xce\xcf\xc9\x2f\x2a\x8e\x36\xb2\x32\xd0\x31\x88\xb5\x31\xb2\x32\xd4\x31\xb2\x43\x11\x35\x8c\xe5\x54\x0d\xcf" +
	"\x2f\x4a\xc1\x50\x83\x10\x04\x29\xf1\x2f\x2d\x29\x28\x2d\x41\x57\x83\x24\x0a\x52\x14\xe0\xe6\x8c\xae\x02\x26\x64" +
	"\x18\xcb\x15\xef\x62\xc5\x09\x32\x34\xde\xb9\xa4\x28\x07\xcc\xe2\x34\x00\x43\x43\x18\x46\x52\x92\x9f\x97\x06\x51" +
	"\x62\x88\x47\x49\x3a\xcc\x14\x43\x0c\x25\x60\x1f\x42\x6c\x02\x33\xa1\x92\x10\xb3\x0c\x39\x0d\x90\x15\x81\xec\x42" +
	"\x28\x32\xc4\xa5\x28\x1d\xc5\x24\x43\xb8\x22\x40\x00\x00\x00\xff\xff\x74\xc9\x94\x4d\x75\x01\x00\x00")

func bindataStrooptesttsvBytes() ([]byte, error) {
	return bindataRead(
		_bindataStrooptesttsv,
		"stroop_test.tsv",
	)
}



func bindataStrooptesttsv() (*asset, error) {
	bytes, err := bindataStrooptesttsvBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{
		name: "stroop_test.tsv",
		size: 373,
		md5checksum: "",
		mode: os.FileMode(420),
		modTime: time.Unix(1573794092, 0),
	}

	a := &asset{bytes: bytes, info: info}

	return a, nil
}

var _bindataStroopsoatsv = []byte(
	"\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\x9c\x96\x4d\x6b\xdb\x40\x10\x86\xcf\xdb\xdf\x91\xdc\x52\xd0\xae\x17\xb3" +
	"\x98\x52\x48\x5d\x9a\x5e\x5a\x87\x26\x90\x43\x31\xc2\xb8\x6a\x6a\x50\x2c\x23\xcb\xa4\x06\xff\xf8\xa2\xfa\x6b\x67" +
	"\x67\xdf\x61\x9c\x43\x12\x90\x37\x0f\xcf\x7a\x66\x5e\x4d\xf9\x75\x64\xae\xbe\xcf\x5e\x2a\x73\x3d\x6e\xea\xa6\x5d" +
	"\xff\x74\xa3\xe2\xa6\x98\x7e\x70\x23\x7b\xe3\x3e\x92\xa7\x76\x6a\xae\x9f\x9a\xf6\x17\x3b\x73\x7e\xd8\x1f\x99\x6c" +
	"\xba\xd5\xa6\x4b\xcf\x44\x4f\xfb\x43\xf7\x5f\xc6\xe9\x89\xe3\x23\x3b\x35\xbb\x87\xc9\xad\xd9\x7d\x9b\xfd\x1d\x6f" +
	"\xe7\x75\xb5\x36\x57\x77\x6d\xb3\x59\x99\xdd\x63\xbb\x98\xd5\x8f\xdb\x55\xf5\xae\xfc\x3c\x32\xf7\xe5\x7c\x59\x3e" +
	"\x95\x77\x65\x35\x6b\xeb\xed\xba\x5b\xbc\x98\xc2\x14\xc6\x1e\x7e\xf7\x7f\xdf\xbb\xc2\xb8\x62\x7f\x72\xde\x2c\x7f" +
	"\xd7\x8b\x79\x57\x3e\x4c\x6e\xcb\xfe\x83\x82\x52\xea\x59\x57\x1d\x20\x36\x03\x51\x52\x04\x17\x3b\x34\x76\x98\xa3" +
	"\xd8\xa1\xde\xc5\x0e\x91\x0b\xa7\x48\x2e\xce\x58\x97\xa5\xb8\x0b\x5c\x1c\x74\x61\x14\xc1\x25\x98\x90\x63\x04\xbd" +
	"\x48\x40\x1e\x8c\x21\x68\x78\xe3\x73\x08\xaf\xd7\xf0\x48\x83\x30\x3e\x35\xdd\x1f\x0c\x41\xad\x46\x1a\x6d\x5c\xb6" +
	"\xe4\x26\xfb\x7f\x3c\x22\xf2\x17\xf1\x29\x00\x2a\xa0\x6b\x30\x02\x56\xc8\x97\x34\xa8\x15\x50\x41\x19\x01\x2b\xa0" +
	"\x0e\xa7\xad\x29\x5a\xc0\xfe\xe6\x0c\xc1\x03\x4c\x3d\x1d\x57\xd9\x03\xcd\x3c\x67\x60\x0f\x94\x84\x8e\x75\x16\xf4" +
	"\x80\x39\x98\xc6\xe0\x8f\x64\xce\xf6\x2e\xd9\x48\x7e\x6e\x37\xd5\xf2\x9c\xa6\x96\x62\x88\x0a\xa7\x68\x31\x82\x0d" +
	"\x2d\x4f\x8c\xe9\x3f\xd1\xda\x24\x15\x92\x31\x92\x0d\x69\x5a\x82\x71\x17\xd8\x38\x6c\xc3\x30\x82\x4d\x3c\xc5\x31" +
	"\x24\xe8\x55\x02\x34\x61\x10\x41\x24\x4e\xb4\x98\xe1\xf5\x22\x1e\x8a\x10\x08\x0f\xe7\x98\x02\x7b\x8e\x74\x9c\x3e" +
	"\x9d\x23\x82\x4f\x09\x50\x02\xde\x84\x21\x74\xf9\x1c\x11\x82\x5a\x02\xd6\x95\x21\xb4\x09\x1d\x31\x68\x93\x8a\x1e" +
	"\xb8\xd5\x39\x44\x9b\xd1\x31\x64\xa8\x37\x81\x11\xc0\x21\xda\x94\x8e\x20\x8e\xb5\x18\x34\xc1\xd1\x18\x41\x5e\xdb" +
	"\x72\x5c\x3e\x47\x26\x47\x8f\x23\xe9\x94\xd3\xaf\x2d\x5f\x7a\x1d\xa5\x9c\x54\x6c\x04\x38\x43\x94\x14\xc1\xe5\x58" +
	"\x20\x46\xe9\xbf\x75\xad\xcb\xa9\x42\x0a\x8a\xe4\x72\x68\x5b\x4e\x71\x17\xb8\x38\xe8\xc2\x28\x82\xcb\x7e\x8e\x19" +
	"\x23\xe8\x45\x02\xf2\x60\x0c\x41\x63\x9f\x69\x0c\xe1\xf5\x1a\x1e\x69\x10\x06\x4d\xe7\x14\x82\x5a\x8d\x34\x1a\x7e" +
	"\xd3\xf4\x3f\xf9\x8b\xf8\x14\x00\x15\xd0\x35\x18\x01\x2b\xe4\x4b\x1a\xd4\x0a\xa8\xa0\x8c\x80\x15\x50\x87\xd3\xd6" +
	"\x14\x2d\x60\x7f\x73\x86\xe0\x01\xa6\x9e\x8e\xab\xec\x81\x66\x9e\x33\xb0\x07\x4a\x42\xc7\x3a\x0b\x7a\xc0\x1c\x4c" +
	"\x63\x10\xbd\x1c\x32\x91\x9c\xec\xbc\x03\x8a\xc9\xbe\x1e\x72\x99\x2c\x63\x04\x1b\x5a\x9e\x64\xe7\x55\xdb\x24\x15" +
	"\x92\x31\x92\x0d\x69\xda\x64\xe7\xd5\xdb\x38\x6c\xc3\x30\x82\x4d\x3c\xc5\x74\xeb\x55\xab\x04\x68\xc2\x20\x82\x48" +
	"\x9c\x68\x74\xeb\x55\x8b\x78\x28\x42\x20\x78\x75\xe6\xe1\x4c\x56\xe7\xc1\x5b\xd2\x99\xec\xbd\x03\x30\x85\xa9\x04" +
	"\xbc\x09\x43\xe8\xf2\x99\xec\xbd\x5a\x09\x58\x57\x86\xd0\x26\x34\xdd\x7a\xb5\x1e\xb8\xd5\x39\x44\x9b\xd1\x74\xeb" +
	"\x55\x9b\xc0\x08\xe0\x10\x6d\x4a\xd3\xad\x57\x6b\x82\xa3\xf1\x3f\xe4\x5f\x00\x00\x00\xff\xff\x28\x64\x52\x3f\x2e" +
	"\x17\x00\x00")

func bindataStroopsoatsvBytes() ([]byte, error) {
	return bindataRead(
		_bindataStroopsoatsv,
		"stroop_soa.tsv",
	)
}



func bindataStroopsoatsv() (*asset, error) {
	bytes, err := bindataStroopsoatsvBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{
		name: "stroop_soa.tsv",
		size: 5934,
		md5checksum: "",
		mode: os.FileMode(420),
		modTime: time.Unix(1573895408, 0),
	}

	a := &asset{bytes: bytes, info: info}

	return a, nil
}


//
// Asset loads and returns the asset for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
//
func Asset(name string) ([]byte, error) {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[cannonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("Asset %s can't read by error: %v", name, err)
		}
		return a.bytes, nil
	}
	return nil, &os.PathError{Op: "open", Path: name, Err: os.ErrNotExist}
}

//
// MustAsset is like Asset but panics when Asset would return an error.
// It simplifies safe initialization of global variables.
// nolint: deadcode
//
func MustAsset(name string) []byte {
	a, err := Asset(name)
	if err != nil {
		panic("asset: Asset(" + name + "): " + err.Error())
	}

	return a
}

//
// AssetInfo loads and returns the asset info for the given name.
// It returns an error if the asset could not be found or could not be loaded.
//
func AssetInfo(name string) (os.FileInfo, error) {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[cannonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("AssetInfo %s can't read by error: %v", name, err)
		}
		return a.info, nil
	}
	return nil, &os.PathError{Op: "open", Path: name, Err: os.ErrNotExist}
}

//
// AssetNames returns the names of the assets.
// nolint: deadcode
//
func AssetNames() []string {
	names := make([]string, 0, len(_bindata))
	for name := range _bindata {
		names = append(names, name)
	}
	return names
}

//
// _bindata is a table, holding each asset generator, mapped to its name.
//
var _bindata = map[string]func() (*asset, error){
	"stroop_train.tsv": bindataStrooptraintsv,
	"stroop_test.tsv":  bindataStrooptesttsv,
	"stroop_soa.tsv":   bindataStroopsoatsv,
}

//
// AssetDir returns the file names below a certain
// directory embedded in the file by go-bindata.
// For example if you run go-bindata on data/... and data contains the
// following hierarchy:
//     data/
//       foo.txt
//       img/
//         a.png
//         b.png
// then AssetDir("data") would return []string{"foo.txt", "img"}
// AssetDir("data/img") would return []string{"a.png", "b.png"}
// AssetDir("foo.txt") and AssetDir("notexist") would return an error
// AssetDir("") will return []string{"data"}.
//
func AssetDir(name string) ([]string, error) {
	node := _bintree
	if len(name) != 0 {
		cannonicalName := strings.Replace(name, "\\", "/", -1)
		pathList := strings.Split(cannonicalName, "/")
		for _, p := range pathList {
			node = node.Children[p]
			if node == nil {
				return nil, &os.PathError{
					Op: "open",
					Path: name,
					Err: os.ErrNotExist,
				}
			}
		}
	}
	if node.Func != nil {
		return nil, &os.PathError{
			Op: "open",
			Path: name,
			Err: os.ErrNotExist,
		}
	}
	rv := make([]string, 0, len(node.Children))
	for childName := range node.Children {
		rv = append(rv, childName)
	}
	return rv, nil
}


type bintree struct {
	Func     func() (*asset, error)
	Children map[string]*bintree
}

var _bintree = &bintree{Func: nil, Children: map[string]*bintree{
	"stroop_soa.tsv": {Func: bindataStroopsoatsv, Children: map[string]*bintree{}},
	"stroop_test.tsv": {Func: bindataStrooptesttsv, Children: map[string]*bintree{}},
	"stroop_train.tsv": {Func: bindataStrooptraintsv, Children: map[string]*bintree{}},
}}

// RestoreAsset restores an asset under the given directory
func RestoreAsset(dir, name string) error {
	data, err := Asset(name)
	if err != nil {
		return err
	}
	info, err := AssetInfo(name)
	if err != nil {
		return err
	}
	err = os.MkdirAll(_filePath(dir, filepath.Dir(name)), os.FileMode(0755))
	if err != nil {
		return err
	}
	err = ioutil.WriteFile(_filePath(dir, name), data, info.Mode())
	if err != nil {
		return err
	}
	return os.Chtimes(_filePath(dir, name), info.ModTime(), info.ModTime())
}

// RestoreAssets restores an asset under the given directory recursively
func RestoreAssets(dir, name string) error {
	children, err := AssetDir(name)
	// File
	if err != nil {
		return RestoreAsset(dir, name)
	}
	// Dir
	for _, child := range children {
		err = RestoreAssets(dir, filepath.Join(name, child))
		if err != nil {
			return err
		}
	}
	return nil
}

func _filePath(dir, name string) string {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	return filepath.Join(append([]string{dir}, strings.Split(cannonicalName, "/")...)...)
}
