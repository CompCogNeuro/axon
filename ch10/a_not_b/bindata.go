// Code generated by go-bindata. DO NOT EDIT.
// sources:
// a_not_b_delay3.tsv
// a_not_b_delay5.tsv
// a_not_b_delay1.tsv

package main


import (
	"bytes"
	"compress/gzip"
	"fmt"
	"io"
	"io/ioutil"
	"os"
	"path/filepath"
	"strings"
	"time"
)

func bindataRead(data []byte, name string) ([]byte, error) {
	gz, err := gzip.NewReader(bytes.NewBuffer(data))
	if err != nil {
		return nil, fmt.Errorf("Read %q: %v", name, err)
	}

	var buf bytes.Buffer
	_, err = io.Copy(&buf, gz)
	clErr := gz.Close()

	if err != nil {
		return nil, fmt.Errorf("Read %q: %v", name, err)
	}
	if clErr != nil {
		return nil, err
	}

	return buf.Bytes(), nil
}


type asset struct {
	bytes []byte
	info  fileInfoEx
}

type fileInfoEx interface {
	os.FileInfo
	MD5Checksum() string
}

type bindataFileInfo struct {
	name        string
	size        int64
	mode        os.FileMode
	modTime     time.Time
	md5checksum string
}

func (fi bindataFileInfo) Name() string {
	return fi.name
}
func (fi bindataFileInfo) Size() int64 {
	return fi.size
}
func (fi bindataFileInfo) Mode() os.FileMode {
	return fi.mode
}
func (fi bindataFileInfo) ModTime() time.Time {
	return fi.modTime
}
func (fi bindataFileInfo) MD5Checksum() string {
	return fi.md5checksum
}
func (fi bindataFileInfo) IsDir() bool {
	return false
}
func (fi bindataFileInfo) Sys() interface{} {
	return nil
}

var _bindataAnotbdelay3tsv = []byte(
	"\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\xec\x94\x41\x4b\xc3\x30\x18\x86\xcf\x9f\xbf\x63\xbb\x6d\x21\x89\x56\x58" +
	"\x91\xc1\xa6\xa0\x07\xf1\x20\xde\xa4\x8c\xd0\x05\x56\xa8\xa6\x64\x51\xe8\xbf\x97\x2d\x26\x4d\x63\x86\xf1\x12\x41" +
	"\x43\xc9\x57\xf8\xfa\x3e\x94\x3e\x2f\x74\x73\x57\xc2\xe4\x56\x8a\xb7\x0e\x26\x0f\xec\x85\xc3\xf4\x5e\xd4\x4c\x35" +
	"\xe2\xf5\x99\x96\x78\x86\xab\x2b\x5a\x92\xd9\xf9\xd2\xdb\x93\xca\x5b\xd0\x0a\xa6\xd7\xe2\x9d\x4b\x17\xa3\x4b\x77" +
	"\x79\x60\x9e\x44\xef\x07\xcc\xea\xf0\xf8\x91\xb3\x7a\xe7\xbf\x78\x58\x8e\x23\xb4\x3a\xdb\xdc\x94\xd0\x29\xd9\xb0" +
	"\x16\xba\xf9\x5e\x31\xa9\x00\x23\x52\x7c\x0e\x7b\x33\xd7\x38\xaf\x44\x3f\xef\x24\xdf\x03\x46\x8b\x23\xa2\x89\xe3" +
	"\x5c\x14\xbf\xcb\xb4\xcd\xd6\x30\x03\x52\x0c\xf3\x2b\xb1\xe5\x2d\xeb\x01\xa3\x0b\x7d\xcc\x0c\x87\xeb\x9d\x68\x6a" +
	"\x0e\x18\x5d\xea\x63\x66\x38\x9d\xc5\x66\xb1\x59\xec\x7f\x16\xbb\xd2\xe9\x55\x48\xec\xe9\xf0\x0f\xbe\x36\x39\x13" +
	"\x6d\xd5\x12\x31\x56\x13\x84\x73\x5f\x7f\xb0\xaf\xb5\x4e\xaf\x63\x7f\x5c\x36\xef\xa8\x24\xd6\x5e\x58\x65\x72\xc6" +
	"\xa9\x8c\x8c\xcb\x42\x27\x88\x18\xb1\x09\xc2\xdf\x56\xf6\x11\x00\x00\xff\xff\x61\x35\x7e\x2a\x35\x0b\x00\x00")

func bindataAnotbdelay3tsvBytes() ([]byte, error) {
	return bindataRead(
		_bindataAnotbdelay3tsv,
		"a_not_b_delay3.tsv",
	)
}



func bindataAnotbdelay3tsv() (*asset, error) {
	bytes, err := bindataAnotbdelay3tsvBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{
		name: "a_not_b_delay3.tsv",
		size: 2869,
		md5checksum: "",
		mode: os.FileMode(420),
		modTime: time.Unix(1573951443, 0),
	}

	a := &asset{bytes: bytes, info: info}

	return a, nil
}

var _bindataAnotbdelay5tsv = []byte(
	"\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\xec\x94\x41\x4b\xc3\x30\x14\xc7\xcf\xcf\xcf\xb1\xdd\xb6\x90\x44\x2b\xac" +
	"\xc8\x60\x53\xd0\x83\x78\x10\x6f\x52\x46\xe8\x02\x2b\x54\x13\xb2\x28\xf4\xdb\xcb\x16\x93\xa6\x31\xc3\xec\x32\x19" +
	"\x86\x92\x57\x78\xfd\xfd\x28\xfd\xbf\x47\x57\x0f\x25\x8c\xee\x95\xf8\x90\x30\x7a\x62\x6f\x1c\xc6\x8f\xa2\x66\xba" +
	"\x11\xef\xaf\xb4\xc4\x13\x5c\xdd\xd0\x92\x4c\x2e\xe7\x41\x9f\x54\x41\x83\x56\x30\xbe\x15\x9f\x5c\xf9\x1a\x9d\xfb" +
	"\xcd\x9d\xf3\x22\xba\x10\xb0\xad\xdd\xe3\x67\xce\xea\x4d\xf8\xe2\xbe\x39\x44\x68\x75\xb1\xba\x2b\x41\x6a\xd5\xb0" +
	"\x16\xe4\x74\xab\x99\xd2\x80\x11\x29\xbe\x8b\xbb\xd9\x6b\xc8\x6b\xd1\x4d\xa5\xe2\x5b\xc0\x68\xb6\x57\x8c\xb1\xaf" +
	"\xb3\xe2\x6f\x9d\xb6\x59\x5b\xa7\x57\x8a\xbe\xfe\x34\xd6\xbc\x65\x1d\x60\x74\x65\x8e\xad\x71\xb8\xde\x88\xa6\xe6" +
	"\x80\xd1\xb5\x39\xb6\xc6\xe9\x1c\x6c\x0e\x36\x07\xfb\x9f\x83\x5d\x18\x7a\x11\x0b\xf6\x30\x7c\xc4\xd7\x9e\xdc\x49" +
	"\x4e\xd5\x19\x29\xa9\x9e\x35\x9c\x37\x21\x6f\xc2\x11\x9b\xb0\x34\xf4\x32\xf5\x67\xeb\x78\x6f\x48\xc4\xcd\x25\x3e" +
	"\xa4\x93\x3b\xde\x32\x90\xe1\x1a\xa0\x03\x46\x4a\xb0\x67\x0d\xff\xba\x0c\x5f\x01\x00\x00\xff\xff\x31\x88\x44\x2c" +
	"\x43\x0c\x00\x00")

func bindataAnotbdelay5tsvBytes() ([]byte, error) {
	return bindataRead(
		_bindataAnotbdelay5tsv,
		"a_not_b_delay5.tsv",
	)
}



func bindataAnotbdelay5tsv() (*asset, error) {
	bytes, err := bindataAnotbdelay5tsvBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{
		name: "a_not_b_delay5.tsv",
		size: 3139,
		md5checksum: "",
		mode: os.FileMode(420),
		modTime: time.Unix(1573951443, 0),
	}

	a := &asset{bytes: bytes, info: info}

	return a, nil
}

var _bindataAnotbdelay1tsv = []byte(
	"\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\xec\x94\x41\x4b\xc3\x30\x14\xc7\xcf\xcf\xcf\xb1\xdd\xb6\x90\x44\x2b\xae" +
	"\xc8\x60\x53\xd0\x83\x78\x10\x6f\x52\x46\xe8\x02\x2b\x54\x13\xb2\x28\xf4\xdb\xcb\x16\x93\xa6\x59\x06\xf1\xb2\x1d" +
	"\x16\xc6\x7b\x83\x7f\xff\x3f\xca\xfb\x1d\xba\x7a\x2e\x61\xf4\xa4\xc4\xb7\x84\xd1\x2b\xfb\xe4\x30\x7e\x11\x35\xd3" +
	"\x8d\xf8\xfa\xa0\x25\x9e\xe0\xea\x9e\x96\x64\x72\x3d\x0f\x72\x52\x05\x01\xad\x60\xfc\x20\x7e\xb8\xf2\x31\x3a\xf7" +
	"\xc3\x1d\xf3\x2e\xba\xb0\x60\xa3\xdd\xe3\x37\xce\xea\x4d\xf8\xe2\x3e\x1c\x56\x68\x75\xb5\x7a\x2c\x41\x6a\xd5\xb0" +
	"\x16\xe4\x74\xab\x99\xd2\x80\x11\x29\xfe\x96\xfb\xb3\xbf\x61\x5f\x8b\x6e\x2a\x15\xdf\x02\x46\xb3\x3d\x62\x88\xfd" +
	"\x9e\x15\xe7\x65\xda\x66\x6d\x99\x1e\x29\xfa\x7d\x48\xac\x79\xcb\x3a\xc0\xe8\xc6\x8c\xdd\xf1\x72\xbd\x11\x4d\xcd" +
	"\x01\xa3\x5b\x33\x76\xc7\xdb\x59\x6c\x16\x9b\xc5\x5e\xb2\xd8\x85\x69\x2f\x62\x62\x8f\x97\xff\x71\xed\xc9\x99\x64" +
	"\xab\x8e\x48\xb1\xea\xca\xd9\xea\xd9\xac\x2e\x4d\x7b\x99\xfa\x11\x70\x7d\xef\x60\xe2\x6e\x8c\x1f\x7c\x72\xc6\x13" +
	"\x4b\x86\x4a\xd1\x11\x22\x45\xac\x2b\x3b\xb1\x77\x66\x0e\xc4\xfe\x06\x00\x00\xff\xff\x18\x51\x9e\x54\x27\x0a\x00" +
	"\x00")

func bindataAnotbdelay1tsvBytes() ([]byte, error) {
	return bindataRead(
		_bindataAnotbdelay1tsv,
		"a_not_b_delay1.tsv",
	)
}



func bindataAnotbdelay1tsv() (*asset, error) {
	bytes, err := bindataAnotbdelay1tsvBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{
		name: "a_not_b_delay1.tsv",
		size: 2599,
		md5checksum: "",
		mode: os.FileMode(420),
		modTime: time.Unix(1573951443, 0),
	}

	a := &asset{bytes: bytes, info: info}

	return a, nil
}


//
// Asset loads and returns the asset for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
//
func Asset(name string) ([]byte, error) {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[cannonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("Asset %s can't read by error: %v", name, err)
		}
		return a.bytes, nil
	}
	return nil, &os.PathError{Op: "open", Path: name, Err: os.ErrNotExist}
}

//
// MustAsset is like Asset but panics when Asset would return an error.
// It simplifies safe initialization of global variables.
// nolint: deadcode
//
func MustAsset(name string) []byte {
	a, err := Asset(name)
	if err != nil {
		panic("asset: Asset(" + name + "): " + err.Error())
	}

	return a
}

//
// AssetInfo loads and returns the asset info for the given name.
// It returns an error if the asset could not be found or could not be loaded.
//
func AssetInfo(name string) (os.FileInfo, error) {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[cannonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("AssetInfo %s can't read by error: %v", name, err)
		}
		return a.info, nil
	}
	return nil, &os.PathError{Op: "open", Path: name, Err: os.ErrNotExist}
}

//
// AssetNames returns the names of the assets.
// nolint: deadcode
//
func AssetNames() []string {
	names := make([]string, 0, len(_bindata))
	for name := range _bindata {
		names = append(names, name)
	}
	return names
}

//
// _bindata is a table, holding each asset generator, mapped to its name.
//
var _bindata = map[string]func() (*asset, error){
	"a_not_b_delay3.tsv": bindataAnotbdelay3tsv,
	"a_not_b_delay5.tsv": bindataAnotbdelay5tsv,
	"a_not_b_delay1.tsv": bindataAnotbdelay1tsv,
}

//
// AssetDir returns the file names below a certain
// directory embedded in the file by go-bindata.
// For example if you run go-bindata on data/... and data contains the
// following hierarchy:
//     data/
//       foo.txt
//       img/
//         a.png
//         b.png
// then AssetDir("data") would return []string{"foo.txt", "img"}
// AssetDir("data/img") would return []string{"a.png", "b.png"}
// AssetDir("foo.txt") and AssetDir("notexist") would return an error
// AssetDir("") will return []string{"data"}.
//
func AssetDir(name string) ([]string, error) {
	node := _bintree
	if len(name) != 0 {
		cannonicalName := strings.Replace(name, "\\", "/", -1)
		pathList := strings.Split(cannonicalName, "/")
		for _, p := range pathList {
			node = node.Children[p]
			if node == nil {
				return nil, &os.PathError{
					Op: "open",
					Path: name,
					Err: os.ErrNotExist,
				}
			}
		}
	}
	if node.Func != nil {
		return nil, &os.PathError{
			Op: "open",
			Path: name,
			Err: os.ErrNotExist,
		}
	}
	rv := make([]string, 0, len(node.Children))
	for childName := range node.Children {
		rv = append(rv, childName)
	}
	return rv, nil
}


type bintree struct {
	Func     func() (*asset, error)
	Children map[string]*bintree
}

var _bintree = &bintree{Func: nil, Children: map[string]*bintree{
	"a_not_b_delay1.tsv": {Func: bindataAnotbdelay1tsv, Children: map[string]*bintree{}},
	"a_not_b_delay3.tsv": {Func: bindataAnotbdelay3tsv, Children: map[string]*bintree{}},
	"a_not_b_delay5.tsv": {Func: bindataAnotbdelay5tsv, Children: map[string]*bintree{}},
}}

// RestoreAsset restores an asset under the given directory
func RestoreAsset(dir, name string) error {
	data, err := Asset(name)
	if err != nil {
		return err
	}
	info, err := AssetInfo(name)
	if err != nil {
		return err
	}
	err = os.MkdirAll(_filePath(dir, filepath.Dir(name)), os.FileMode(0755))
	if err != nil {
		return err
	}
	err = ioutil.WriteFile(_filePath(dir, name), data, info.Mode())
	if err != nil {
		return err
	}
	return os.Chtimes(_filePath(dir, name), info.ModTime(), info.ModTime())
}

// RestoreAssets restores an asset under the given directory recursively
func RestoreAssets(dir, name string) error {
	children, err := AssetDir(name)
	// File
	if err != nil {
		return RestoreAsset(dir, name)
	}
	// Dir
	for _, child := range children {
		err = RestoreAssets(dir, filepath.Join(name, child))
		if err != nil {
			return err
		}
	}
	return nil
}

func _filePath(dir, name string) string {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	return filepath.Join(append([]string{dir}, strings.Split(cannonicalName, "/")...)...)
}
